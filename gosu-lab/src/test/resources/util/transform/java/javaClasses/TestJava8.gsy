uses java.io.Serializable
uses java.lang.annotation.*
uses java.util.*
uses java.util.function.Consumer
uses java.util.function.Supplier

public class TestJava8  {

    internal var x : int
    interface IA  {

        function doIt(x_0 : int, y : int) : int
    }

    interface IB  {

        function doIt() : void
    }

    function callA(a : IA) : void {
    }

    function callB(b : IB) : void {
    }

    function testLambda() : void {
        callA(\ x_0 : int, y : int -> x_0 + y)
        callA(\ x_1, y_0 -> x_1 + y_0)
        callA(\ a, b -> {  {
            return a + b
        }
 })
        callB(\  -> System.out.print("yay"))
        callB(\  -> {  {
            System.out.print("yay")
        }
 })
    }

    function testIntersectionTypeCast() : void {
        var s : Serializable = \  -> System.out.println("intersection") as Runnable & Serializable
    }

    @Target({ElementType.TYPE_USE})
    public annotation MyAnno  {

    }

    abstract class foo<T> implements /* @MyAnno() */List</* @MyAnno() */T> {

    }

    function testTypeAnnotation() : void {
        new /* @MyAnno() */Object()
        var a : String = "" as /* @MyAnno() */String
    }

    static class MyInteger  {

        public static function compare(x_0 : Integer, y : Integer) : int {
            return (x_0 < y) ? -1 : ((x_0 == y) ? 0 : 1)
        }

    }

    function sort<T>(a : T[], c : Comparator<T>) : void {
    }

    function forEach<T>(l : List<T>, action : Consumer<T>) : void {
    }

    function m<T>(s : Supplier<T>) : void {
    }

    function testMethoReferences() : void {
        var stringArray : String[] = {"Niklaus", "Rob", "James"}
        var intArray : Integer[] = {5, 2, 1}
        sort(stringArray, String#compareToIgnoreCase().toBlock())
        sort(intArray, Integer#compare().toBlock())
        sort(intArray, Integer#compare(Integer, Integer).toBlock())
        sort(intArray, MyInteger#compare().toBlock())
        var l : List<String> = Arrays.asList(new String[]{"A", "B"})
        forEach(l, System.out#print().toBlock())
        forEach(l, System.out#print(String).toBlock())
        forEach(l, System.out#print(Object).toBlock())
        m(HashMap<String, Integer>#construct().toBlock())
    }

    interface IDog  {

        function bark() : void {
            System.out.println("ruff")
        }

        static function run() : void {
            System.out.println("running")
        }

    }

    public abstract static class Tree  {

        public abstract function bark() : void
    }

    static class DogWood extends Tree implements IDog {

        override public function bark() : void {
            super[IDog].bark()
            IDog.run()
            super[TestJava8.IDog].bark()
        }

    }

    annotation MyAnnotation  {

        function str() : String[] = {"Hello", "World"}
        function integer() : int
        function doubleN() : double = 1.0
        function bol() : boolean
        function character() : char
        function arr() : IntAnnotation[]
        public static class FooBar<T>  {

            public static final var val : int = 3

        }

        function value() : Class<String>
        annotation MyAnnotation2  {

            function shortInt() : short
        }

        function ann() : MyAnnotation2
    }

    annotation IntAnnotation  {

        function num() : int
    }

}
