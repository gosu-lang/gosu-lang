/*
 * Copyright 2014 Guidewire Software, Inc.
 */
package gw.lang.parser.resources;

import java.util.ListResourceBundle;

public class Strings extends ListResourceBundle
 {
   static final Object[][] contents =
     {
       {Res.MSG_SYNTAX_ERROR.getKey(), "Syntax error."},
       {Res.MSG_BAD_IDENTIFIER_NAME.getKey(), "Could not resolve symbol for : {0}"},
       {Res.MSG_END_OF_STMT.getKey(), "Expecting end of statement. Possible bad or missing operator."},
       {Res.MSG_END_OF_EXPRESSION.getKey(), "Expecting end of expression. Possible bad or missing operator."},
       {Res.MSG_EXPECTING_OPERATOR_TO_FOLLOW_EXPRESSION.getKey(), "Incomplete Statement. Expecting operator to follow expression."},
       {Res.MSG_EXPECTING_ARGS.getKey(), "Expecting argument[s] for function, {0}"},
       {Res.MSG_EXPECTING_EXPRESSION_CLOSE.getKey(), "Expecting ')' to close parenthesized expression."},
       {Res.MSG_EXPECTING_FUNCTION_CLOSE.getKey(), "Expecting ')' to close function call."},
       {Res.MSG_EXPECTING_TYPE_NAME.getKey(), "Expecting a type name."},
       {Res.MSG_PARAMETERIZATION_NOT_SUPPORTED_FOR_TYPE.getKey(), "{0} does not support parameterization."},
       {Res.MSG_NO_ARGUMENTS.getKey(), "Function {0} accepts no arguments."},
       {Res.MSG_NULL_SYMBOL_TABLE.getKey(), "Symbol table is null or empty."},
       {Res.MSG_TYPE_MISMATCH.getKey(), "The type \"{1}\" cannot be converted to \"{0}\""},
       {Res.MSG_VALUE_MISMATCH.getKey(), "Value mismatch. The literal value, \"{0}\", cannot be converted to a {1}."},
       {Res.MSG_WRONG_NUM_OF_ARGS.getKey(), "Wrong number of arguments for function, {0}"},
       {Res.MSG_EXPECTING_NAME_FUNCTION_DEF.getKey(), "Expecting a name for the function."},
       {Res.MSG_EXPECTING_LEFTPAREN_FUNCTION_DEF.getKey(), "Expecting '(' to open function argument declaration."},
       {Res.MSG_EXPECTING_RIGHTPAREN_FUNCTION_DEF.getKey(), "Expecting ')' to close function argument declaration."},
       {Res.MSG_EXPECTING_TYPE_FUNCTION_DEF.getKey(), "Expecting \":\" clause for function declaration."},
       {Res.MSG_EXPECTING_TYPE_LITERAL_FUNCTION_DEF.getKey(), "Expecting type after \":\" for function declaration."},
       {Res.MSG_EXPECTING_IDENTIFIER_FOREACH.getKey(), "Expecting identifier for \"for...in\" statement."},
       {Res.MSG_EXPECTING_IDENTIFIER_FOREACH_INDEX.getKey(), "Expecting identifier in the \"for...in\" statement's \"index\"."},
       {Res.MSG_EXPECTING_IDENTIFIER_FOREACH_ITERATOR.getKey(), "Expecting identifier in the \"for...in\" statement's \"iterator\"."},
       {Res.MSG_FOREACH_ITERATOR_NOT_ALLOWED.getKey(), "\"iterator\" is not allowed in a \"for...in\" statement without a loop variable."},
       {Res.MSG_ITERATOR_SYMBOL_ONLY_SUPPORTED_ON_ITERABLE_OBJECTS.getKey(), "An \"iterator\" symbol is only supported for Iterable objects."},
       {Res.MSG_EXPECTING_IDENTIFIER_EXISTS.getKey(), "Expecting identifier for \"exists\" expression"},
       {Res.MSG_EXPECTING_IDENTIFIER_EXISTS_INDEX.getKey(), "Expecting identifier in the \"exists\" expression's \"index\"."},
       {Res.MSG_EXPECTING_IN_FOREACH.getKey(), "Expecting \"in\" clause for \"for...in\" statement."},
       {Res.MSG_EXPECTING_LEFTPAREN_FE.getKey(), "Expecting '(' in \"for...in\" statement."},
       {Res.MSG_EXPECTING_RIGHTPAREN_FE.getKey(), "Expecting ')' in \"for...in\" statement."},
       {Res.MSG_EXPECTING_LEFTPAREN_BLOCK.getKey(), "Expecting '(' in block type declaration."},
       {Res.MSG_EXPECTING_RIGHTPAREN_BLOCK.getKey(), "Expecting ')' in block type declaration."},
       {Res.MSG_EXPECTING_COLON_BLOCK.getKey(), "Expecting ':' in block type declaration."},
       {Res.MSG_EXPECTING_IN_EXISTS.getKey(), "Expecting \"in\" clause for \"exists\" expression."},
       {Res.MSG_EXPECTING_WHERE_EXISTS.getKey(), "Expecting \"where\" clause for \"exists\" expression."},
       {Res.MSG_EXPECTING_LEFTPAREN_EXISTS.getKey(), "Expecting '(' in \"exists\" expression."},
       {Res.MSG_EXPECTING_RIGHTPAREN_EXISTS.getKey(), "Expecting ')' in \"exists\" expression."},
       {Res.MSG_EXPECTING_LEFTPAREN_EVAL.getKey(), "Expecting '(' to open \"eval\" expression."},
       {Res.MSG_EXPECTING_RIGHTPAREN_EVAL.getKey(), "Expecting ')' to close \"eval\" expression."},
       {Res.MSG_EXPECTING_LEFTPAREN_CATCH.getKey(), "Expecting '(' in \"catch\" clause of \"try...catch...finally\" statement."},
       {Res.MSG_EXPECTING_RIGHTPAREN_CATCH.getKey(), "Expecting ')' in \"catch\" clause of \"try...catch...finally\" statement."},
       {Res.MSG_EXPECTING_IDENTIFIER_CATCH.getKey(), "Expecting identifier for \"catch\" clause of \"try...catch...finally\" statement."},
       {Res.MSG_CATCH_OR_FINALLY_REQUIRED.getKey(), "Expecting a \"catch\" or \"finally\" clause in \"try...catch...finally\" statement."},
       {Res.MSG_EXPECTING_LEFTBRACE_STMTBLOCK.getKey(), "Expecting '{' to open statement block."},
       {Res.MSG_EXPECTING_RIGHTBRACE_STMTBLOCK.getKey(), "Expecting '}' to close statement block."},
       {Res.MSG_EXPECTING_LEFTPAREN_IF.getKey(), "Expecting '(' to open \"if\" condition."},
       {Res.MSG_EXPECTING_RIGHTPAREN_IF.getKey(), "Expecting ')' to close \"if\" condition."},
       {Res.MSG_EXPECTING_LEFTPAREN_SWITCH.getKey(), "Expecting '(' to open \"switch\" expression."},
       {Res.MSG_EXPECTING_RIGHTPAREN_SWITCH.getKey(), "Expecting ')' to close \"switch\" expression."},
       {Res.MSG_EXPECTING_LEFTPAREN_WHILE.getKey(), "Expecting '(' to open \"while\" condition."},
       {Res.MSG_EXPECTING_RIGHTPAREN_WHILE.getKey(), "Expecting ')' to close \"while\" condition."},
       {Res.MSG_EXPECTING_LEFTPAREN_USING.getKey(), "Expecting '(' to open \"using\" predicate."},
       {Res.MSG_EXPECTING_RIGHTPAREN_USING.getKey(), "Expecting ')' to close \"using\" predicate."},
       {Res.MSG_EXPECTING_WHILE_DO.getKey(), "Expecting \"while\" clause to close \"do...while\" statement."},
       {Res.MSG_LOOP_DOESNT_LOOP.getKey(), "Loop doesn't loop"},
       {Res.MSG_EXPECTING_EQUALS_ASSIGN.getKey(), "Expecting '=' for assignment statement."},
       {Res.MSG_EXPECTING_EXPRESSSION_ON_RHS.getKey(), "Expecting a valid rhs expression for assignment statement."},
       {Res.MSG_EXPECTING_STATEMENT.getKey(), "Expecting statement."},
       {Res.MSG_EXPECTING_BEANTYPE.getKey(), "Expecting complex type for member-access. Found: {0}"},
       {Res.MSG_EXPECTING_ARRAYTYPE_FOREACH.getKey(), "Expecting iterable type after 'in' clause in \"for...in\" statement. Found: {0}"},
       {Res.MSG_EXPECTING_ARRAYTYPE_EXISTS.getKey(), "Expecting Array type after 'in' clause in \"exists\" expression. Found: "},
       {Res.MSG_EXPECTING_IDENTIFIER_ARG_TYPE.getKey(), "Expecting type name after \":\" for function argument."},
       {Res.MSG_EXPECTING_ARRAY_BRACKET.getKey(), "Expecting ']' to close array type literal."},
       {Res.MSG_EXPECTING_NEW_ARRAY_OR_CTOR.getKey(), "Expecting '[' or '(' to begin a new array or object operation."},
       {Res.MSG_EXPECTING_OPEN_BRACE_FOR_NEW_ARRAY.getKey(), "Expecting '{' to begin a list of array value expressions."},
       {Res.MSG_EXPECTING_CLOSE_BRACE_FOR_NEW_ARRAY.getKey(), "Expecting '}' to close the list of array value expressions."},
       {Res.MSG_EXPECTING_CLOSING_ANGLE_BRACKET_FOR_TYPE.getKey(), "Expecting '>' to close parameterized type literal."},
       {Res.MSG_EXPECTING_CLOSING_ANGLE_BRACKET_FOR_TYPE_VAR_LIST.getKey(), "Expecting '>' to close type variable list."},
       {Res.MSG_COULD_NOT_PARAMETERIZE.getKey(), "Could not parameterize."},
       {Res.MSG_EXPECTING_OPEN_BRACE_FOR_SWITCH.getKey(), "Expecting '{' to open \"switch\" statement."},
       {Res.MSG_EXPECTING_CLOSE_BRACE_FOR_SWITCH.getKey(), "Expecting '}' to close \"switch\" statement."},
       {Res.MSG_EXPECTING_COLON_TERNARY.getKey(), "Expecting ':' for conditional ternary expression."},
       {Res.MSG_EXPECTING_REFERENCE_TYPE.getKey(), "Expecting reference type, primitive type not allowed here."},
       {Res.MSG_EXPECTING_CASE_COLON.getKey(), "Expecting ':' to close \"case\" expression."},
       {Res.MSG_DUPLICATE_CASE_EXPRESSION.getKey(), "Duplicate case expression."},
       {Res.MSG_LOSS_OF_PRECISION_IN_CONDITIONAL_EXP.getKey(), "Types cannot be converted without a loss of precision.  Please convert them explicitly."},
       {Res.MSG_EXPECTING_IDENTIFIER_VAR.getKey(), "Expecting a variable name."},
       {Res.MSG_EXPECTING_VAR_STMT.getKey(), "Expecting \"var\" declaration."},
       {Res.MSG_EXPECTING_TYPELITERAL.getKey(), "Expecting a type literal on right side of expression."},
       {Res.MSG_EXPECTING_TYPELITERAL_OR_NAMESPACE.getKey(), "Expecting a type literal or namespace."},
       {Res.MSG_PRIMITIVES_NOT_ALLOWED_HERE.getKey(), "Primitive types not allowed here."},
       {Res.MSG_INCONVERTIBLE_TYPES.getKey(), "Inconvertible types; cannot cast {0} to {1}"},
       {Res.MSG_BAD_NAMESPACE.getKey(), "{0} is not a valid namespace."},
       {Res.MSG_EXPECTING_ARRAYLENGTH.getKey(), "Expecting 'length' array property."},
       {Res.MSG_ENTITYBEANS_ARE_IMMUTABLE.getKey(), "The property of the object cannot be modified directly."},
       {Res.MSG_MULTIPLE_DEFAULT_CLAUSES_NOT_PERMITTED.getKey(), "Multiple 'default' clauses detected in \"switch\" statement."},
       {Res.MSG_METHOD_NOT_VISIBLE.getKey(), "The function, \"{0}\", is not visible under the parser's visibility constraints."},
       {Res.MSG_PROPERTY_NOT_VISIBLE.getKey(), "The property, \"{0}\", is not visible under the parser's visibility constraints."},
       {Res.MSG_OBJECT_RETIRED.getKey(), "The ID, \"{0}\", references a retired object."},
       {Res.MSG_OBJECT_LITERALS_DEPRECATED.getKey(), "Entity literals have been deprecated, please use a query builder instead."},
       {Res.MSG_DEPRECATED_MEMBER.getKey(), "{0} in {1} has been deprecated."},
       {Res.MSG_EXPECTING_ENTITY_TYPE.getKey(), "Expecting an entity type name in \"find\" expression."},
       {Res.MSG_EXPECTING_QUERY_PATH.getKey(), "Expecting a query path expression."},
       {Res.MSG_QUERY_PATH_MUST_BEGIN_WITH.getKey(), "The query path expression must begin with \"{0}\""},
       {Res.MSG_EXPECTING_CONDITIONAL_EXPRESSION.getKey(), "Expecting a conditional expression like \"a > b\""},
       {Res.MSG_CONDITIONAL_EXPRESSION_EXPECTS_BOOLEAN.getKey(), "boolean expected."},
       {Res.MSG_EXPECTING_IDENTIFIER_FIND.getKey(), "Expecting identifier for \"find\" expression"},
       {Res.MSG_EXPECTING_IN_FIND.getKey(), "Expecting \"in\" clause for \"find\" expression."},
       {Res.MSG_EXPECTING_WHERE_FIND.getKey(), "Expecting \"where\" clause for \"find\" expression."},
       {Res.MSG_EXPECTING_LEFTPAREN_FIND.getKey(), "Expecting '(' in \"find\" expression."},
       {Res.MSG_EXPECTING_RIGHTPAREN_FIND.getKey(), "Expecting ')' in \"find\" expression."},
       {Res.MSG_QUERYPATH_MUST_BEGIN_WITH.getKey(), "The query path must begin with its parent query expression \"{0}\"."},
       {Res.MSG_QUERY_IN_LHS_OP_NOT_ENTITY.getKey(), "{0} does not resolve to an entity type. The \"in\" operator requires an entity type property on the lhs."},
       {Res.MSG_QUERY_IN_LHS_OP_NOT_ARRAY.getKey(), "{0} does not have an appropriate array type. The \"in\" operator requires an entity type property on the lhs that has a valid array type."},
       {Res.MSG_QUERY_EXPECTED_BOOLEAN_EXPRESSION.getKey(), "{0} is not a boolean expression."},
       {Res.MSG_EXPECTING_READONLY_ENTITY_TYPE.getKey(), "\"find\" is limited to read-only entity types. Set the \"allow-entity-queries\" registry element to find writable entities."},
       {Res.MSG_EXPECTING_READONLY_ENTITY_TYPE.getKey(), "\"find\" is limited to read-only entity types. Set the \"allow-entity-queries\" registry element to find writable entities."},
       {Res.MSG_STR_IMMUTABLE.getKey(), "Strings are immutable, they cannot be modified"},
       {Res.MSG_UNTERMINATED_STRING_LITERAL.getKey(), "Unterminated string literal. Expecting \"."},
       {Res.MSG_INVALID_CHAR_AT.getKey(), "Illegal escape character at position {0}"},
       {Res.MSG_UNTERMINATED_COMMENT.getKey(), "Unterminated comment. Expecting \"*/\"."},
       {Res.MSG_UNEXPECTED_EOF.getKey(), "Unexpected end of file"},
       {Res.MSG_FUNCTION_ALREADY_DEFINED.getKey(), "{0}, is already defined in {1}"},
       {Res.MSG_FUNCTION_CLASH.getKey(), "\"{0}\" in \"{1}\" clashes with \"{2}\" in \"{3}\"; return types not compatible."},
       {Res.MSG_FUNCTION_CLASH_PARAMS.getKey(), "\"{0}\" in \"{1}\" clashes with \"{2}\" in \"{3}\"; both functions have same erasure, yet neither overrides the other"},
       {Res.MSG_ATTEMPTING_TO_ASSIGN_WEAKER_ACCESS_PRIVILEGES.getKey(), "\"{0}\" in \"{1}\" clashes with \"{2}\" in \"{3}\"; attempting to assign weaker access privileges." },
       {Res.MSG_CANNOT_OVERRIDE_FINAL.getKey(), "Cannot override final member \"{0}\" from \"{1}\""},
       {Res.MSG_CANNOT_ASSIGN_VALUE_TO_FINAL_VAR.getKey(), "Cannot assign a value to final var \"{0}\""},
       {Res.MSG_VAR_MIGHT_NOT_HAVE_BEEN_INIT.getKey(), "Var \"{0}\" might not have been initialized"},
       {Res.MSG_VAR_MIGHT_ALREADY_HAVE_BEEN_INIT.getKey(), "Var \"{0}\" might already have been initialized"},
       {Res.MSG_VAR_MIGHT_ALREADY_HAVE_BEEN_INIT_LOOP.getKey(), "Var \"{0}\" might already have been initialized in loop"},
       {Res.MSG_FUNCTION_ALREADY_DEFINED_IN_EXTENDED_CLASS.getKey(), "{0}, is already defined. Extensions cannot override functions."},
       {Res.MSG_DUPLICATE_CLASS_FOUND.getKey(), "Duplicate class found at: {0}."},
       {Res.MSG_DUPLICATE_TYPE_FOUND.getKey(), "Duplicate type found at: {0}."},
       {Res.MSG_DUPLICATE_ENHANCEMENT_FOUND.getKey(), "Duplicate enhancement found at: {0}."},
       {Res.MSG_EXPECTING_OPEN_BRACE_FOR_CLASS_DEF.getKey(), "Expecting '{' to open \"class\" statement."},
       {Res.MSG_EXPECTING_CLOSE_BRACE_FOR_CLASS_DEF.getKey(), "Expecting '}' to close \"class\" statement."},
       {Res.MSG_EXPECTING_NAME_CLASS_DEF.getKey(), "Expecting a name for the class."},
       {Res.MSG_EXPECTING_ENHANCEMENT_DEF.getKey(), "Expecting an enhancement."},
       {Res.MSG_NAMESPACE_CLASS_CONFLICT.getKey(), "The directory path of the class does not correspond with the package name."},
       {Res.MSG_NO_SUCH_FUNCTION.getKey(), "No function defined for {0}."},
       {Res.MSG_CANNOT_EXTEND_PRIMITIVE_TYPE.getKey(), "Cannot extend a primitive type {0}."},
       {Res.MSG_CANNOT_EXTEND_FINAL_TYPE.getKey(), "Cannot extend a final type {0}."},
       {Res.MSG_ENHANCEMENTS_CANNOT_ENHANCE_OTHER_ENHANCEMENTS.getKey(), "Cannot enhance an enhancement {0}."},
       {Res.MSG_CYCLIC_INHERITANCE.getKey(), "Cyclic inheritance involving {0}."},
       {Res.MSG_EXPECTING_OPEN_BRACE_FOR_CONSTRUCTOR_DEF.getKey(), "Expecting '{' to open constructor body."},
       {Res.MSG_EXPECTING_OPEN_BRACE_FOR_FUNCTION_DEF.getKey(), "Expecting '{' to open function body."},
       {Res.MSG_EXPECTING_CLOSE_BRACE_FOR_FUNCTION_DEF.getKey(), "Expecting '}' to close function body."},
       {Res.MSG_EXPECTING_CLOSE_BRACE_FOR_CONSTRUCTOR_DEF.getKey(), "Expecting '}' to close constructor body."},
       {Res.MSG_NO_DEFAULT_CTOR_IN.getKey(), "No default constructor in {0}."},
       {Res.MSG_WRONG_NAMESPACE.getKey(), "The package name \"{0}\" does not correspond with the directory \"{1}\"."},
       {Res.MSG_WRONG_CLASSNAME.getKey(), "The class name {0} does not correspond with the file {1}."},
       {Res.MSG_SAME_NAME_AS_CLASS.getKey(), "\"{0}\" is already defined as the class name for this file"},
       {Res.MSG_EXPECTING_PROPERTY_GET_OR_SET_MODIFIER.getKey(), "Expecting 'get' or 'set' modifier for property."},
       {Res.MSG_EXPECTING_NAME_PROPERTY.getKey(), "Expecting a property name for the variable."},
       {Res.MSG_PROPERTY_ALREADY_DEFINED.getKey(), "Property \"{0}\" is already defined."},
       {Res.MSG_GETTER_FOR_PROPERTY_ALREADY_DEFINED.getKey(), "Property 'get' function already defined for \"{0}\"."},
       {Res.MSG_SETTER_FOR_PROPERTY_ALREADY_DEFINED.getKey(), "Property 'set' function already defined for \"{0}\"."},
       {Res.MSG_PROPERTY_NOT_WRITABLE.getKey(), "\"{0}\" is not writable."},
       {Res.MSG_CLASS_PROPERTY_NOT_READABLE.getKey(), "Property, \"{0}\", of class, \"{1}\", is not readable."},
       {Res.MSG_CLASS_PROPERTY_NOT_WRITABLE.getKey(), "Property, \"{0}\", of class, \"{1}\", is not writable."},
       {Res.MSG_NO_VIEWS_FOR_YOUS.getKey(), "Views are not supported. Consider querying against \"{0}\""},
       {Res.MSG_VARIABLE_ALREADY_DEFINED.getKey(), "{0}, is already defined. Please use a different name."},
       {Res.MSG_FUNCTION_DECL_MISSING.getKey(), "Internal Error. Could not find decl function symbol for, {0}." },
       {Res.MSG_EXPECTING_DEFAULT_VALUE.getKey(), "Expecting default value assignment. Required parameters must precede optional paramters."},
       {Res.MSG_DEFAULT_VALUE_NOT_ALLOWED.getKey(), "Default value not allowed here"},
       {Res.MSG_COMPILE_TIME_CONSTANT_REQUIRED.getKey(), "Expression must be compile-time constant here."},
       {Res.MSG_OVERLOADING_NOT_ALLOWED_WITH_OPTIONAL_PARAMS.getKey(), "Overloading not allowed with optional parameters."},
       {Res.MSG_MISSING_REQUIRED_ARGUMENTS.getKey(), "Missing one or more required arguments"},
       {Res.MSG_ARGUMENT_ALREADY_DEFINED.getKey(), "Argument already defined"},
       {Res.MSG_EXPECTING_NAME_PARAM.getKey(), "Expecting name for parameter"},
       {Res.MSG_EXPECTING_NAMED_ARG.getKey(), "Expecting a named argument"},
       {Res.MSG_PARAM_NOT_FOUND.getKey(), "Parameter not found"},
       {Res.MSG_VARIABLE_REQUEST_DOES_NOT_ALLOW_VALUE.getKey(), ", request variables cannot have an initial value."},
       {Res.MSG_VARIABLE_TYPE_OR_VALUE_REQUIRED.getKey(), "Expecting an \"as\" and/or \":\" for \"var\" statement."},
       {Res.MSG_VARIABLE_MUST_HAVE_NON_NULL_TYPE.getKey(), "Variables must have a non-null type.  Add an explicit type for this variable."},
       {Res.MSG_CONDITION_IS_ALWAYS_TRUE_FALSE.getKey(), "Condition is always {0}"},
       {Res.MSG_VOID_NOT_ALLOWED.getKey(), "'void' type not allowed here"},
       {Res.MSG_FUNCTIONS_NOT_ALLOWED_IN_THIS_CONTEXT.getKey(), "Function declarations not allowed in this context"},
       {Res.MSG_CONSTRUCTORS_NOT_ALLOWD_IN_THIS_CONTEXT.getKey(), "Constructors not allowed in this context"},
       {Res.MSG_ANON_CTOR_PARAMS_CONFLICT_WITH_CALL_SITE.getKey(), "Anonymous constructor parameter types conflict with arg types at the call site"},
       {Res.MSG_SINGLE_ANON_CTOR.getKey(), "An anonymous class may define at most one constructor"},
       {Res.MSG_INNER_CLASSES_NOT_ALLOWED_IN_THIS_CONTEXT.getKey(), "Inner class declarations not allowed in this context"},
       {Res.MSG_NO_SOURCE_FOUND.getKey(), "No source found for class."},
       {Res.MSG_CANNOT_RETURN_VALUE_FROM_VOID.getKey(), "Cannot return a value from a void function."},
       {Res.MSG_MISSING_RETURN_VALUE.getKey(), "Missing return value."},
       {Res.MSG_RETURN_NOT_ALLOWED_HERRE.getKey(), "Return statement not allowed here."},
       {Res.MSG_EXPECTING_DECL.getKey(), "Expecting declaration for var, function, or property."},
       {Res.MSG_FUNCTION_ARG_NAME_CONFLICTS_WITH_CLASS_VAR.getKey(), "The argument \"{0}\" of function {1} conflicts with a class field."},
       {Res.MSG_EXPECTING_ARROW_AFTER_BLOCK_ARGS.getKey(), "Expecting '->' to follow block argument declarations."},
       {Res.MSG_EXPECTING_CLOSE_BRACE_FOR_BLOCK.getKey(), "Expecting '}' to follow block statement list."},
       {Res.MSG_EXPECTING_ARROW_AFTER_MAP_KEY.getKey(), "Expecting '->' for map initializer entry."},
       {Res.MSG_UNEXPECTED_ARROW.getKey(), "Unexpected '->' in list initializer"},
       {Res.MSG_EXPECTING_CLOSE_BRACE_FOR_INITIALIZER.getKey(), "Expecting '}' to follow initializer statement."},
       {Res.MSG_MODIFIER_ABSTRACT_NOT_ALLOWED_HERE.getKey(), "Modifier 'abstract' not allowed here."},
       {Res.MSG_NOT_ALLOWED_IN_INTERFACE.getKey(), "Not allowed in interface."},
       {Res.MSG_UNIMPLEMENTED_METHOD.getKey(), "{0} function not implemented: {1}"},
       {Res.MSG_INHERITS_UNRELATED_DEFAULTS.getKey(), "{0} Inherits unrelated defaults for {1} from {2} and {3}"},
       {Res.MSG_INHERITS_ABSTRACT_AND_DEFAULT.getKey(), "{0} Inherits abstract and default methods for {1} from {2} and {3}"},
       {Res.MSG_INTERFACE_CANNOT_EXTEND_CLASS.getKey(), "An interface cannot extend a class, only interfaces."},
       {Res.MSG_CLASS_CANNOT_EXTEND_INTERFACE.getKey(), "A class cannot 'extend' an interface."},
       {Res.MSG_CANNOT_EXTEND_ARRAY.getKey(), "A class cannot 'extend' an array."},
       {Res.MSG_CLASS_MUST_HAVE_PACKAGE.getKey(), "A class must have a package."},
       {Res.MSG_CLASS_CANNOT_IMPLEMENT_CLASS.getKey(), "A class cannot 'implement' a class."},
       {Res.MSG_ENUM_CANNOT_EXTEND_CLASS.getKey(), "An enum cannot extend a class"},
       {Res.MSG_ENUM_CANNOT_HAVE_ANNOTATIONS.getKey(), "An enum constant cannot have annotations"},
       {Res.MSG_ENUM_CONSTRUCTOR_MUST_BE_PRIVATE.getKey(), "Enum constructor must be declared private"},
       {Res.MSG_ENUM_CONSTRUCTOR_NOT_ACCESSIBLE.getKey(), "Enum constructor is not accessible here"},
       {Res.MSG_ENUM_MAY_NOT_HAVE_TYPEPARAM.getKey(), "Enum may not have type parameters"},
       {Res.MSG_BAD_CAPTURE_TYPE.getKey(), "Blocks do not support lexical reference to this type of symbol.  Assign to a local variable outside the block to refer to it."},
       {Res.MSG_POTENTIALLY_BAD_CAPTURE.getKey(), "This identifier captures an external variable that does not fully support \"out of scope\" capturing.  A runtime error may result if the identifier evaluates outside the outermost enclosing function's scope."},
       {Res.MSG_CANNOT_CAPTURE_SYMBOL_IN_BLOCK_IN_ANON_CLASS.getKey(), "You cannot capture symbols in a block nested inside of an anonymous class."},
       {Res.MSG_CANNOT_CAPTURE_SYMBOL_IN_ANON_CLASS_IN_BLOCK.getKey(), "You cannot capture symbols in an anonymous class nested inside of a block."},
       {Res.MSG_EXPECTING_ENHANCE_KEYWORD.getKey(), "Expected \"enhance\""},
       {Res.MSG_DELEGATES_CANNOT_BE_STATIC.getKey(), "Delegates cannot be static."},
       {Res.MSG_DELEGATE_METHOD_CONFLICT.getKey(), "Delegate member conflict: {0} and {1}. Implement the member explicitly to resolve the conflict."},
       {Res.MSG_DELEGATES_SHOULD_NOT_SELF_DELEGATE.getKey(), "Delegates should not self-delegate."},
       {Res.MSG_NON_PRIVATE_MEMBERS_MUST_DECLARE_TYPE.getKey(), "Non-private data members must declare a type explicitly."},
       {Res.MSG_EXTENSION_CLASS_NOT_FOUND.getKey(), "Could not find class {0} to extend."},
       {Res.MSG_CANNOT_DEREF_PROPERTIES_IN_WHERE.getKey(), "Cannot dereference property in where clause. Consider using 'exists' clause."},
       {Res.MSG_CANNOT_CALL_METHOD_WITH_WILDCARD_PARAM.getKey(), "Cannot call function having wildcard parameters."},
       {Res.MSG_NO_WILDCARDS.getKey(), "Wildcards are deprecated in Gosu. Please replace the type parameter with \"{0}\""},
       {Res.MSG_EXPECTING_COLON_ENHANCEMENT.getKey(), "Expecting ':' in enhancement."},
       {Res.MSG_EXPECTING_CLOSE_BRACKET_FOR_LIST_LITERAL.getKey(), "Expecting ']' at the end of a list literal."},
       {Res.MSG_CANNOT_PARAMETERIZE_NONGENERIC.getKey(), "Cannot parameterize a non-generic type."},
       {Res.MSG_TYPE_PARAM_NOT_ASSIGNABLE_TO.getKey(), "Type parameter {0} is not assignable to bounding type {1}."},
       {Res.MSG_TYPE_NOT_ANNOTATION.getKey(), "Type {0} is not an annotation.  It must be a java annotation or implement interface gw.lang.IAnnotation"},
       {Res.MSG_MISPLACED_META_ANNOTATION.getKey(), "This annotation can only be used on an annotation class."},
       {Res.MSG_MISPLACED_ANNOTATION.getKey(), "This annotation cannot be used on an annotation class."},
       {Res.MSG_ANNOTATION_WHEN_NONE_ALLOWED.getKey(), "Annotation \"{0}\" is not allowed to appear in a {1} declaration."},
       {Res.MSG_ANNOTATION_USE_SITE_TARGET_NOT_ALLOWED_HERE.getKey(), "Annotation \"{0}\" has invalid use-site target \"{1}\" for context."},
       {Res.MSG_TOO_MANY_ANNOTATIONS.getKey(), "Annotation \"{0}\" can only appear once in a {1} declaration."},
       {Res.MSG_EXPECTING_COLON_ANNOTATION.getKey(), "Expecting ':' to separate use-site target and annotation type."},
       {Res.MSG_INVALID_TYPE.getKey(), "\"{0}\" is not a valid type."},
       {Res.MSG_INVALID_GENERIC_EXCEPTION.getKey(), "Generic class may not extend 'java.lang.Throwable'"},
       {Res.MSG_INVALID_INNER_TYPE.getKey(), "No inner class \"{0}\" found on \"{1}\"."},
       {Res.MSG_INVALID_TYPE_WITH_QUALIFIED_NAME.getKey(), "\"{0}\" has an invalid type: \"{1}\"."},
       {Res.MSG_NOT_A_STATEMENT.getKey(), "Not a statement."},
       {Res.MSG_CANNOT_CONSTRUCT_ABSTRACT_CLASS.getKey(), "\"{0}\" is abstract; cannot be constructed."},
       {Res.MSG_CANNOT_CONSTRUCT_RECURSIVE_CLASS.getKey(), "\"{0}\" is recursive; cannot be directly constructed."},
       {Res.MSG_RECURSIVE_CONSTRUCTOR.getKey(), "Recursive constructor invocation."},
       {Res.MSG_MISSING_RETURN.getKey(), "Missing return statement."},
       {Res.MSG_UNREACHABLE_STMT.getKey(), "Unreachable statement."},
       {Res.MSG_BREAK_OUTSIDE_SWITCH_OR_LOOP.getKey(), "Break statement not allowed here."},
       {Res.MSG_CONTINUE_OUTSIDE_LOOP.getKey(), "Continue statement not allowed here."},
       {Res.MSG_PROPERTY_SET_MUST_HAVE_ONE_PARAMETER.getKey(), "Property setters must have exactly one parameter."},
       {Res.MSG_PROPERTY_SET_MUST_RETURN_VOID.getKey(), "Property setters must return void."},
       {Res.MSG_MISSING_PROPERTY_RETURN.getKey(), "Missing property return type."},
       {Res.MSG_IMPLICIT_COERCION_ERROR.getKey(), "You must explicitly coerce {0} to {1} using the 'as' keyword."},
       {Res.MSG_ASYMMETRICAL_COMPARISON.getKey(), "Asymmetric comparison between {0} and {1}. Consider casting one of the operands." },
       {Res.MSG_SILLY_ASSIGNMENT.getKey(), "An unnecessary assignment from {0} to itself occurs here."},
       {Res.MSG_UNUSED_VARIABLE.getKey(), "This {0} is unused."},
       {Res.MSG_LIKELY_JAVA_CAST.getKey(), "This appears to be a Java-style cast.  To cast an expression to another type in Gosu, use \"as {0}\" after the expression"},
       {Res.MSG_UNEXPECTED_TOKEN.getKey(), "Unexpected token: {0}"},
       {Res.MSG_EXPECTING_INT_ACCESS_TO_ARR_ETC.getKey(), "Expecting int access to Array, Collection, or String type with array [] operator."},
       {Res.MSG_EXPECTING_BEAN_TYPE_WITH_REFLECTION_OPERATOR.getKey(), "Expecting bean type with [] reflection operator."},
       {Res.MSG_PROPERTY_REFLECTION_ONLY_WITH_STRINGS.getKey(), "Bean property reflection can only be done with Strings."},
       {Res.MSG_EXPECTING_BRACKET_TO_CLOSE_DYNAMIC_MEMBER_ACCESS.getKey(), "Expecting ']' operator to close dynamic member access expression."},
       {Res.MSG_WRONG_NUMBER_OF_ARGS_TO_FUNCTION.getKey(), "Wrong number of arguments to function {0}.  Expected {1}, got {2}."},
       {Res.MSG_WRONG_NUMBER_OF_ARGS_TO_CONSTRUCTOR.getKey(), "Wrong number of arguments to constructor {0}.  Expected {1}, got {2}."},
       {Res.MSG_SHOULD_HAVE_FOUND_METHOD_AT_LINE.getKey(), "Should have found a function at line {0}, column {1}"},
       {Res.MSG_VOID_EXPRESSION_NOT_ALLOWED.getKey(), "Expressions in this position must be non-void."},
       {Res.MSG_EXPECTING_RETURN_TYPE_OR_FUN_BODY.getKey(), "Expecting return type or function body."},
       {Res.MSG_INVALID_TYPE_FOR_ANNOTATION_MEMBER.getKey(), "Invalid type for annotation member"},
       {Res.MSG_ERRANT_TYPE_VAR.getKey(), "Errant type var"},
       {Res.MSG_USING_VOID_RETURN_TYPE_FROM_NON_NULL_EXPR.getKey(), "Using void return type from non-null expression."},
       {Res.MSG_FIELD_TYPE_HAS_NOT_BEEN_INFERRED.getKey(), "The type of this field has not yet been inferred, and thus it cannot be used.  " +
                                                           "This expression must appear after the field declaration."},
       {Res.MSG_BEAN_CLASS_IS_NULL.getKey(), "Bean class is null!"},
       {Res.MSG_BEAN_MEMBER_PATH_IS_NULL.getKey(), "Bean member path is null!"},
       {Res.MSG_BEAN_MEMBER_PATH_IS_EMPTY.getKey(), "Bean member path is empty!"},
       {Res.MSG_NO_EXPLICIT_TYPE_INFO_FOUND.getKey(), "No explicit type info found for, {0}"},
       {Res.MSG_ABSTRACT_METHOD_CANNOT_BE_ACCESSED_DIRECTLY.getKey(), "Abstract method cannot be accessed directly"},
       {Res.MSG_NO_CONSTRUCTOR_FOUND_FOR_CLASS.getKey(), "No constructor found for class, {0}"},
       {Res.MSG_WRONG_NUMBER_OF_ARGS_FOR_METHOD_ON_CLASS.getKey(), "Wrong number of arguments for function, {0}, on class, {1}"},
       {Res.MSG_NO_METHOD_DESCRIPTOR_FOUND_FOR_METHOD.getKey(), "No function descriptor found for function, {0}, on class, {1}"},
       {Res.MSG_METHOD_IS_NOT_STATIC.getKey(), "Function \"{0}\" is not static on class {1}"},
       {Res.MSG_METHOD_IS_STATIC.getKey(), "Function \"{0}\" is static on class {1}"},
       {Res.MSG_NO_PROPERTY_DESCRIPTOR_FOUND.getKey(), "No{0} property descriptor found for property, {1}, on class, {2}"},
       {Res.MSG_NO_TYPE_ON_NAMESPACE.getKey(), "No type {0} found in package {1}"},
       {Res.MSG_ANY.getKey(), "{0}"},
       {Res.MSG_TYPE_IS_NOT_ITERABLE.getKey(), "Expecting Iterable type for expansion operator - {0}"},
       {Res.MSG_INTERVAL_MUST_BE_ITERABLE_HERE.getKey(), "Interval type must be iterable here"},
       {Res.MSG_EXTRA_DOT_FOUND_IN_INTERVAL.getKey(), "Interval operator has two dots, found three"},
       {Res.MSG_EXPECTING_NUMBER_TO_FOLLOW_DECIMAL.getKey(), "Expecting a decimal number"},
       {Res.MSG_IMPROPER_VALUE_FOR_NUMERIC_TYPE.getKey(), "The value {0} does not fall within the domain of numbers of type {1}"},
       {Res.MSG_EXPECTING_MEMBER_ACCESS_PATH.getKey(), "Expecting member access path."},
       {Res.MSG_CANNOT_CREATE_NEW_ARRAY_FROM_TYPE_VAR.getKey(), "Cannot create a new instance array from a type variable.  The type can only be accessed and written to."},
       {Res.MSG_NOT_A_VALID_EXCEPTION_TYPE.getKey(), "{0} does not extend Throwable, and cannot be caught."},
       {Res.MSG_CANNOT_INFER_ARGUMENT_TYPE_AT_THIS_POSTION.getKey(), "The argument {0} must provide a type declaration, because it cannot be inferred."},
       {Res.MSG_OBSOLETE_CTOR_SYNTAX.getKey(), "This constructor syntax is obsolete. Use the 'construct' keyword instead."},
       {Res.MSG_OBSOLETE_NOT_EQUAL_OP.getKey(), "The <> operator is obsolete and must be replaced with !="},
       {Res.MSG_MUST_BE_IN_OUTER_TO_CONSTRUCT_INNER.getKey(), "Must be in or derive from class {0} to construct non-static inner class {1}."},
       {Res.MSG_TYPE_DOES_NOT_HAVE_EMPTY_CONSTRUCTOR.getKey(), "The type {0} does not have a default constructor and cannot be implicitly created here."},
       {Res.MSG_ENHANCEMENT_DOES_NOT_ACCEPT_THIS_STATEMENT.getKey(), "Enhancements cannot have statements of this type."},
       {Res.MSG_CANNOT_OVERRIDE_FUNCTIONS_IN_ENHANCEMENTS.getKey(), "The function \"{0}\" is already defined in the type {1}.  Enhancements cannot override functions."},
       {Res.MSG_CANNOT_OVERRIDE_PROPERTIES_IN_ENHANCEMENTS.getKey(), "The property \"{0}\" is already defined in the type {1}.  Enhancements cannot override properties."},
       {Res.MSG_ENHANCED_TYPE_MUST_USE_ENHANCEMENT_TYPEVARS.getKey(), "Enhanced type must use all type variables declared by the enhancement."},
       {Res.MSG_ABSTRACT_MEMBER_NOT_IN_ABSTRACT_CLASS.getKey(), "Abstract member not in abstract class."},
       {Res.MSG_ILLEGAL_USE_OF_MODIFIER.getKey(), "Illegal use of modifier, \"{0}\" cannot be used with \"{1}\" here"},
       {Res.MSG_ILLEGAL_FORWARD_REFERENCE.getKey(), "Illegal forward reference"},
       {Res.MSG_MISSING_OVERRIDE_MODIFIER.getKey(), "Missing 'override' modifier. {0} overrides and/or implements the member from {1}."},
       {Res.MSG_RENAME_METHOD.getKey(), "Rename function. Function {0} conflicts with the function from {1}, return types incompatible.  Private functions compile with 'internal' access, therefore they conflict at runtime when in same package."},
       {Res.MSG_STATIC_METHOD_CANNOT_OVERRIDE.getKey(), "Static function {0} cannot override/implement the function in {1}."},
       {Res.MSG_OVERRIDES_OBJECT_METHOD.getKey(), "Default method {0} overrides Object method"},
       {Res.MSG_INHEREITED_WITH_DIFF_ARG_TYPES.getKey(), "\"{0}\" cannot be inherited with different type arguments: {1}"},
       {Res.MSG_NO_IMPLEMENTS_ALLOWED.getKey(), "No implements clause allowed for interface."},
       {Res.MSG_NO_EXTENDS_ALLOWED.getKey(), "No extends clause allowed for annotation."},
       {Res.MSG_FUNCTION_NOT_OVERRIDE.getKey(), "Function {0} does not override anything"},
       {Res.MSG_FUNCTION_NOT_OVERRIDE_PROPERTY.getKey(), "Function {0} does not override anything. Perhaps you mean to override a property {1}?"},
       {Res.MSG_SUBCLASS_OBJECT.getKey(), "{0} explicitly subclasses Object"},
       {Res.MSG_LIST_TO_ARRAYLIST_WARNING.getKey(), "Implicit coercion to ArrayList. Please use ArrayList explicitly."},
       {Res.MSG_VAR_CASE_MISMATCH.getKey(), "The var \"{0}\" is not referenced by the proper case.  Please change this reference to \"{1}\"."},
       {Res.MSG_FUNCTION_CASE_MISMATCH.getKey(), "The function \"{0}\" is not referenced by the proper case.  Please change this reference to \"{1}\"."},
       {Res.MSG_PROPERTY_CASE_MISMATCH.getKey(), "The property \"{0}\" is not referenced by the proper case.  Please change this reference to \"{1}\"."},
       {Res.MSG_TYPE_CASE_MISMATCH.getKey(), "The type \"{0}\" is not referenced by the proper case.  Please change this reference to \"{1}\"."},
       {Res.MSG_NON_STATIC_ACCESS_OF_STATIC_MEMBER.getKey(), "The property \"{0}\" is static, but it is not referenced statically on the type {1}."},
       {Res.MSG_NON_STATIC_ACCESS_WITH_IDENTIFIER_OF_STATIC_MEMBER.getKey(), "The property \"{0}\" is static, but not referenced directly off the type {1}.  \nThere is a conflicting variable or property named \"{2}\".  Please fully qualify the expression as {3}.{0}."},
       {Res.MSG_STATEMENT_ON_SAME_LINE.getKey(), "Multiple statements occupy the same line; may indicate an unintentional logic error.\nConsider moving statement to a new line."},
       {Res.MSG_MUST_BE_DEFINED_AS_CLASS.getKey(), "Must be defined as \"class\"."},
       {Res.MSG_VOID_RETURN_IN_CTX_EXPECTING_VALUE.getKey(), "This function expects the block to return a value."},
       {Res.MSG_NO_STATIC_CONSTRUCTOR.getKey(), "Constructors cannot be static"},
       {Res.MSG_NO_ABSTRACT_METHOD_CALL_IN_CONSTR.getKey(), "Function {0} is abstract and cannot be called in constructor."},
       {Res.MSG_CALLING_OVERRIDABLE_FROM_CTOR.getKey(), "Calling overridable function from constructor: {0}"},
       {Res.MSG_DELEGATION_NOT_ALLOWED_HERE.getKey(), "Delegation is not allowed here"},
       {Res.MSG_DELEGATES_REPRESENT_INTERFACES_ONLY.getKey(), "A delegate can only represent interface types"},
       {Res.MSG_ONLY_INTERFACES_ALLOWED_HERE.getKey(), "Only interfaces allowed here"},
       {Res.MSG_NO_ARRAY_IN_COMPONENT_TYPE.getKey(), "Arrays are not allowed in a component type"},
       {Res.MSG_NO_PRIMITIVE_IN_COMPONENT_TYPE.getKey(), "Primitives are not allowed in a component type"},
       {Res.MSG_ONLY_ONE_CLASS_IN_COMPONENT_TYPE.getKey(), "Only one non-interface is allowed in a component type"},
       {Res.MSG_ONLY_ONE_TYPE_VARIABLE.getKey(), "A type variable may not be followed by other bounds"},
       {Res.MSG_COMPOUND_TYPE_NOT_ALLOWED_HERE.getKey(), "Compound type is not allowed here"},
       {Res.MSG_PARAMETERIZED_TYPE_NOT_ALLOWED_HERE.getKey(), "Parameterized type is not allowed here"},
       {Res.MSG_DYNAMIC_TYPE_NOT_ALLOWED_HERE.getKey(), "Dynamic type is not allowed here"},
       {Res.MSG_CANNOT_EXTEND_INTERNAL_JAVATYPE.getKey(), "The Java type {0} has package-protected access and cannot be extended or enhanced in Gosu"},
       {Res.MSG_CLASS_DOES_NOT_IMPL.getKey(), "Delegate interface not implemented by declaring type: {0}"},
       {Res.MSG_CTOR_HAS_XXX_ACCESS.getKey(), "Constructor has {0} access" },
       {Res.MSG_TYPE_HAS_XXX_ACCESS.getKey(), "Type {0} has {1} access" },
       {Res.MSG_EXPECTING_REPRESENTS.getKey(), "Expecting 'represents' clause for delegate"},
       {Res.MSG_EXPECTING_LEFTPAREN_AGGREGATE.getKey(), "Expecting '(' to open aggregate type"},
       {Res.MSG_EXPECTING_RIGHTPAREN_AGGREGATE.getKey(), "Expecting ')' to close aggregate type"},
       {Res.MSG_ALREADY_CONTAINS_TYPE.getKey(), "Already specified type {0}"},
       {Res.MSG_OVERRIDING_FUNCTION_MUST_HAVE_SAME_NUMBER_OF_TYPE_VARS.getKey(), "For this function to properly override its parent function, it must have {0} type variables"},
       {Res.MSG_AGGREGATES_MUST_CONTAIN_MORE.getKey(), "An aggregate type must have more than one type"},
       {Res.MSG_INTERFACE_REDUNDANT.getKey(), "Interface {0} redundant, {1} extends {0}"},
       {Res.MSG_BAD_TYPE_FOR_USING_STMT.getKey(), "Using statement predicate must be Closeable, IDisposable, or Lock. Cast to IMonitorLock for Java-style synchronization."},
       {Res.MSG_UNNECESSARY_COERCION.getKey(), "The type {0} is already assignable to {1}, so coercing is unnecessary."},
       {Res.MSG_EXPECTING_TYPE_TO_FOLLOW_PACKAGE_NAME.getKey(), "Expecting type to follow package name"},
       {Res.MSG_CANNOT_REFERENCE_OUTER_SYMBOL_WITHIN_ENHANCEMENTS.getKey(), "The outer keyword cannot be referenced within enhancements.  Consider moving this anonymous class to a named class."},
       {Res.MSG_NO_TYPE_AFTER_CONSTRUCTOR.getKey(), "Constructors cannot specify a return type."},
       {Res.MSG_CANNOT_REFERENCE_ENCLOSING_PROPERTIES_WITHIN_ENHANCEMENTS.getKey(), "Properties of the enclosing type cannot be referenced within enhancements.  Consider moving this anonymous class to a named class."},
       {Res.MSG_CANNOT_REFERENCE_ENCLOSING_METHODS_WITHIN_ENHANCEMENTS.getKey(), "Methods of the enclosing type cannot be referenced within enhancements.  Consider moving this anonymous class to a named class."},
       {Res.MSG_INVALID_LITERAL.getKey(), "This literal cannot be converted to a {0}.  You will need to construct the value explicitly."},
       {Res.MSG_LOSS_OF_PRECISION_IN_NUMERIC_LITERAL.getKey(), "This double literal loses precision in this operation.  You must explicitly declare it as a BigDecimal instead: {0}"},
       {Res.MSG_PROPERTIES_MUST_AGREE_ON_STATIC_MODIFIERS.getKey(), "The getter and setter of properties must either both be static or non-static"},
       {Res.MSG_PROPERTIES_MUST_AGREE_ON_TYPE.getKey(), "The getter and setter of properties must agree on the type of the property"},
       {Res.MSG_PROPERTY_OVERRIDES_WITH_INCOMPATIBLE_TYPE.getKey(), "Property overrides with incompatible type"},
       {Res.MSG_NO_ENCLOSING_INSTANCE_IN_SCOPE.getKey(), "No enclosing instance of type '{0}' in scope" },
       {Res.MSG_EXPECTING_CONDITION_FOR_ASSERT.getKey(), "Expecting condition for 'assert'" },
       {Res.MSG_EXPECTING_MESSAGE_FOR_ASSERT.getKey(), "Expecting message for 'assert'" },
       {Res.MSG_ASSERTIONS_NOT_ALLOWED_HERE.getKey(), "Assert statement not allowed here" },
       {Res.MSG_MEMBER_ACCESS_REQUIRED_FOR_SUPER.getKey(), "Member access required for 'super'" },
       {Res.MSG_ARRAY_NOT_SUPPORTED.getKey(), "Array type not supported for {0}"},
       {Res.MSG_IMPROPER_USE_OF_KEYWORD.getKey(), "Improper use of keyword, {0}" },
       {Res.MSG_USES_STMT_CONFLICT.getKey(), "Already using type, {0}" },
       {Res.MSG_USES_STMT_DUPLICATE.getKey(), "Duplicate uses statement" },
       {Res.MSG_ARRAY_INDEX_MUST_BE_INT.getKey(), "Arrays must be indexed with an int value"},
       {Res.MSG_PARAM_TYPE_CANT_BE_INFERRED_FROM_LATE_BOUND_EXPRESSION.getKey(), "Parameter type can't be inferred from late bound expression type"},
       {Res.MSG_LATER_ASSIGNMENT_MAKES_EXPRESSION_ILLEGAL.getKey(), "This assignment is not allowed because {1} was infered to type {0} by a typeis expression.  \n" +
                                                                      "Change \"{1} typeis {0}\" to \"{0}.isAssignableFrom( typeof {1} )\" to avoid this inference."},
       {Res.MSG_AMBIGUOUS_METHOD_INVOCATION.getKey(), "This is an ambiguous function call."},
       {Res.MSG_RETURN_VAL_FROM_VOID_FUNCTION.getKey(), "You are attempting to return a value from a void function."},
       {Res.MSG_BAD_ANONYMOUS_CLASS_DECLARATION.getKey(), "Only java and gosu types may be anonymously extended."},
       {Res.MSG_ASSIGNMENT_IN_IF_STATEMENT.getKey(), "Assignments are not legal inside of if condtions"},
       {Res.MSG_ASSIGNMENT_IN_LOOP_STATEMENT.getKey(), "Assignments are not legal inside of loop condtions"},
       {Res.MSG_JAVA_STYLE_VARIABLE_DECLARATION.getKey(), "This is a java-style variable declaration.  Please use the \"var\" keyword instead."},
       {Res.MSG_NUMERIC_TYPE_EXPECTED.getKey(), "Numeric expression expected."},
       {Res.MSG_GETTER_CANNOT_HAVE_PARAMETERS.getKey(), "A property get definition cannot have parameters."},
       {Res.MSG_BAD_TEMPLATE_DIRECTIVE.getKey(), "Invalid template directive.  Valid directives are \"extends\" and \"params\"."},
       {Res.MSG_CLASSPATH_STATEMENT_EXPECTS_A_STRING.getKey(), "The classpath statement requires a string for the path"},
       {Res.MSG_COMMA_IS_THE_CLASSPATH_SEPARATOR.getKey(), "The classpath statement uses commas as a platform-independent path separator"},
       {Res.MSG_BITSHIFT_LHS_MUST_BE_INT_OR_LONG.getKey(), "The left-hand side operand must be an int or a long."},
       {Res.MSG_BITWISE_OPERAND_MUST_BE_INT_OR_LONG.getKey(), "Bit-wise logical operand must be an int or a long."},
       {Res.MSG_NUMBER_LITERAL_TOO_LARGE.getKey(), "Number literal too large."},
       {Res.MSG_ANONYMOUS_CLASS_NOT_ALLOWED_HERE.getKey(), "Anonymous class not allowed here."},
       {Res.MSG_PARAMETERIZED_ARRAY_COMPONENT.getKey(), "Parameterized array component type loses type parameter[s] at runtime" },
       {Res.MSG_TEMPLATE_EXCEPTION_GENERATED_SOURCE.getKey(), "Generated Source"},
       {Res.MSG_TEMPLATE_MISSING_END_TAG_SCRIPTLET.getKey(), "Missing '%>' end tag for scriptlet."},
       {Res.MSG_TEMPLATE_MISSING_END_TAG_EXPRESSION.getKey(), "Missing '%>' end tag for expression."},
       {Res.MSG_TEMPLATE_MISSING_END_TAG_EXPRESSION_ALT.getKey(), "Missing '}' end tag for expression."},
       {Res.MSG_TEMPLATE_MULTIPLE_PARAMS.getKey(), "Multiple \"params\" directives found."},
       {Res.MSG_TEMPLATE_INVALID_PARAMS.getKey(), "Invalid parameters: {0}"},
       {Res.MSG_TEMPLATE_UNKNOWN_DIRECTIVE.getKey(), "Unknown directive {0}.  Valid directives are \"params\" and \"extends\"."},
       {Res.WSDL_DUPLICATE_METHOD.getKey(), "Duplicate web service functions.  Overloaded functions must have a different number of parameters, even if the parameter types are different.\n"+
                                            "{0} conflicts with {1}."},
       {Res.MSG_PRIMITIVE_TYPE_PARAM.getKey(), "Primitive type {0} is not allowed here. Type {0} is implicitly transformed to {1} as a type parameter, please use {1} directly."},
       {Res.MSG_EQUALS_FOR_INITIALIZER_EXPR.getKey(), "Expecting an '=' in this object initializer."},
       {Res.MSG_INITIALIZER_NOT_ALLOWED_ABSTRACT_PROPERTY.getKey(), "Initializer not allowed on abstract property."},
       {Res.MSG_EXPECTING_NAME_VALUE_PAIR.getKey(), "Expecting a property name followed by an '=' and expression value."},
       {Res.MSG_REDUNTANT_INITIALIZERS.getKey(), "The property {0} already has an initializer value."},
       {Res.MSG_ONLY_ONE_COLON_IN_INITIALIZERS.getKey(), "Only one colon can come before a property name in initializers."},
       {Res.MSG_EXPECTING_PROPERTY_NAME.getKey(), "Expecting a property name."},
       {Res.MSG_BLOCK_TYPES_SHOULD_HAVE_ARG_NAMES.getKey(), "Block type parameters should specify names and be in the form 'argName:Type'."},
       {Res.MSG_NONTERMINAL_CASE_CLAUSE.getKey(), "Prior case clause is non-terminal; possible missing break, continue, or return statement"},
       {Res.MSG_DIMENSION_MULTIPLICATION_UNDEFINED.getKey(), "Multiplication undefined between dimensions" },
       {Res.MSG_DIMENSION_ADDITION_MUST_BE_SAME_TYPE.getKey(), "Operands must both be dimensions of the same final type" },
       {Res.MSG_DIMENSION_DIVIDE_SCALAR_BY_DIMENSION.getKey(), "Can't divide scalar by dimension" },
       {Res.MSG_DIMENSION_MUST_BE_FINAL.getKey(), "Dimension arithmetic must involve final types. {0} is not final." },
       {Res.MSG_DIMENSION_NONSTANDARD_NUMBER_NO_OVERRIDE.getKey(), "Missing arithmetic method[s] on Dimension, {0}, with non-standard Number type, {1}" },
       {Res.MSG_RELATIONAL_OPERATOR_CANNOT_BE_APPLIED_TO_TYPE.getKey(), "Relational operator {0} cannot be applied to type {1}" },
       {Res.MSG_ARITHMETIC_OPERATOR_CANNOT_BE_APPLIED_TO_TYPES.getKey(), "Operator \"{0}\" cannot be applied to \"{1}\", \"{2}\""},
       {Res.MSG_ASSIGNMENTS_MUST_BE_ENCLOSED_IN_CURLIES_IN_BLOCKS.getKey(), "Assignments in a block body must be enclosed in curly brackets" },
       {Res.MSG_BLOCKS_CAN_HAVE_A_MOST_SIXTEEN_ARGS.getKey(), "Blocks can have at most 16 args." },
       {Res.MSG_BLOCKS_LITERAL_NOT_ALLOWED_IN_NEW_EXPR.getKey(), "Blocks literals are not allowed in a new expression." },
       {Res.MSG_STATEMENTS_MUST_BE_ENCLOSED_IN_CURLIES_IN_BLOCKS.getKey(), "\"{0}\" statements in a block body must be enclosed in curly brackets" },
       {Res.MSG_NOT_AN_ENHANCEABLE_TYPE.getKey(), "{0} does not support enhancements." },
       {Res.MSG_CANNOT_REFERENCE_CLASS_TYPE_VAR_IN_STATIC_CONTEXT.getKey(), "You cannot reference class type variables in a static context." },
       {Res.MSG_CANNOT_REFERENCE_THIS_IN_STATIC_CONTEXT.getKey(), "You cannot reference 'this' in a static context." },
       {Res.MSG_CANNOT_CALL_NON_STATIC_METHOD_FROM_STATIC_CONTEXT.getKey(), "You cannot reference non-static methods in a static context." },
       {Res.MSG_CANNOT_REFERENCE_NON_STATIC_PROPERTY_FROM_STATIC_CONTEXT.getKey(), "You cannot reference non-static properties in a static context." },
       {Res.MSG_CANNOT_REFERENCE_NON_STATIC_FEATURE_HERE.getKey(), "You cannot reference a non-static feature here" },
       {Res.MSG_ONLY_GOSU_JAVA_TYPES.getKey(), "Only Gosu and Java types allowed here" },
       {Res.MSG_CANNOT_READ_A_WRITE_ONLY_PROPERTY.getKey(), "Write-only properties may only be written" },
       {Res.MSG_CANNOT_EXTEND_RAW_GENERIC_TYPE.getKey(), "The generic type {0} requires type argument[s]" },
       {Res.MSG_TYPE_VAR_VARIANCE_ERROR.getKey(), "The type variable {0} is declared \"{1}\" but is used in a \"{2}\" position with type {3}'" },
       {Res.MSG_NOT_A_SUPERTYPE.getKey(), "{0} is not a direct super type" },
       {Res.USING_INTERNAL_CLASS.getKey(), "This is an internal class that will change in the future.  It is dangerous and unsupported to use this class."},
       {Res.MSG_CALL_TO_SUPER_THIS_MUST_BE_FIRST.getKey(), "Call to {0}() must be the first statement in the constructor" },
       {Res.MSG_COMPILE_TIME_ANNOTATION_FAILED_TO_EXECUTE.getKey(), "A compile time annotation failed to execute.  The message was {0}.  See the console for a stack trace." },
       {Res.MSG_METHOD_REIFIES_TO_SAME_SIGNATURE_AS_ANOTHER_METHOD.getKey(), "A method with the same name reifies to the same signature at the bytecode level.  Rename one of the methods." },
       {Res.MSG_PROPERTY_AND_FUNCTION_CONFLICT.getKey(), "The method {0} conflicts with the implicit methods generated by the property {1}" },
       {Res.MSG_PROPERTY_AND_FUNCTION_CONFLICT_UPON_REIFICATION.getKey(), "The method {0} conflicts with the implicit methods generated by the property {1} upon reification" },
       {Res.MSG_MASKING_ENHANCEMENT_METHODS_MAY_BE_CONFUSING.getKey(), "This method masks a method defined on an enhancement on this type.  This may lead to confusing semantics, since enhancement methods are statically dispatched." },
       {Res.MSG_STRING_COERCION_ON_RHS_OF_ADDITIVE_EXPRESSION_MUST_BE_PARENTHESIZED.getKey(), "Casting to a string within an additive expression may be confusing.  Please parenthesize the expression to evaluate properly." },
       {Res.MSG_EXPLICIT_TYPE_RECOMMENDED_FOR_CATCH_STMTS.getKey(), "You should add an explicitly caught type here." },
       {Res.MSG_SUPER_NOT_ACCESSIBLE_FROM_BLOCK.getKey(), "The super symbol is not accessible from within blocks." },
       {Res.MSG_GENERIC_PROPERTIES_NOT_SUPPORTED.getKey(), "Properties cannot have type variables." },
       {Res.MSG_GENERIC_ANNOTATIONS_NOT_SUPPORTED.getKey(), "Annotation cannot have type variables." },
       {Res.MSG_CANNOT_OVERRIDE_FUNCTION_FROM_ENHANCEMENT.getKey(), "You cannot override a method defined on an enhancement." },
       {Res.MSG_CATCH_STMT_CANNOT_EXECUTE.getKey(), "This catch statement will never execute because a previous catch statement already catches exceptions of this type." },
       {Res.MSG_IMONITOR_LOCK_SHOULD_ONLY_BE_USED_WITHIN_USING_STMTS.getKey(), "The IMonitorLock interface may only be used within expression-style using statements for legacy-style synchronization." },
       {Res.MSG_STATIC_MODIFIER_NOT_ALLOWED_HERE.getKey(), "The 'static' modifier is not allowed here." },
       {Res.MSG_CANNOT_INSTANTIATE_NON_STATIC_CLASSES_HERE.getKey(), "Cannot instantiate a non-static class here." },
       {Res.MSG_WARN_ON_SUSPICIOUS_THIS_COMPARISON.getKey(), "This appears to be a bad comparison.  In gosu, the '==' operator is equivalent to .equals().  If you wish to do instance equivalence, use the '===' operator instead." },

       {Res.MSG_FL_EXPECTING_FEATURE_NAME.getKey(), "Expected a feature name here, either a method name, a property name or 'construct'"},
       {Res.MSG_FL_EXPECTING_RIGHT_CARET.getKey(), "Expected a '>'"},
       {Res.MSG_FL_GENERIC_FUNCTION_REFERENCES_NOT_YET_SUPPORTED.getKey(), "Generic function literals are not yet supported."},
       {Res.MSG_FL_EXPECTING_RIGHT_PAREN.getKey(), "Expected a ')' to close the argument type list."},
       {Res.MSG_FL_CONSTRUCTOR_NOT_FOUND.getKey(), "A constructor with the types {0} was not found"},
       {Res.MSG_FL_METHOD_NOT_FOUND.getKey(), "A method with the name {0} and types {1} was not found"},
       {Res.MSG_FL_PROPERTY_NOT_FOUND.getKey(), "A property with the name {0} was not found"},
       {Res.MSG_FL_ONLY_PROPERTIES_MAY_BE_CHAINED.getKey(), "Only property literals may be chained."},
       {Res.MSG_FL_STATIC_FEATURES_MUST_BE_REFERENCED_FROM_THEIR_TYPES.getKey(), "A static feature or constructor must be referenced directly on the type that the feature belongs to."},

       {Res.MSG_AMBIGUOUS_SYMBOL_REFERENCE.getKey(), "This is an ambiguous reference.  Please fully qualify the symbol."},

       {Res.WSDL_DUPLICATE_WEB_SERVICE.getKey(), "Duplicate web service name.  Only one webservice with the given name can be defined."},
       {Res.WSDL_UNSUPPORTED_TYPE.getKey(), "Web Service cannot reference the following unsupported type: {0} {1}"},
       {Res.WSDL_NOT_WEBSERVICE.getKey(), "This annotation is only available on Web Service"},
       {Res.WSDL_REFERENCE_ABSTRACT_CLASS.getKey(), "Web Service cannot reference an abstract class: {0} {1}"},
       {Res.WSDL_REFERENCE_INTERFACE.getKey(), "Web Service cannot reference an interface: {0} {1}"},
       {Res.WSDL_REFERENCE_ANNOTATION.getKey(), "Web Service cannot reference an annotation: {0} {1}"},
       {Res.WSDL_REFERENCE_TRANSACTION_TYPE.getKey(), "Web Service cannot reference a type in gw.transaction.* namespace: {0} {1}"},
       {Res.WSDL_REFERENCE_LIST.getKey(), "Web Service cannot reference List types: {0}.  Instead, try a strongly typed array (e.g. String[]). {1}"},
       {Res.WSDL_REFERENCE_MAP.getKey(), "Web Service cannot reference Map types: {0} {1}"},
       {Res.WSDL_REFERENCE_COLLECTION.getKey(), "Web Service cannot reference Collection types: {0}.  Instead, try a strongly typed array (e.g. String[]). {1}"},
       {Res.WSDL_REFERENCE_PARAMETERIZED_TYPE.getKey(), "Web Service cannot reference Parameterized types: {0}"},
       {Res.WSDL_REFERENCE_GENERIC_TYPE.getKey(), "Web Service cannot reference Genericized types: {0} {1}"},
       {Res.WSDL_REFERENCE_UNSUPPORTED_NAMESPACE.getKey(), "Web Service cannot reference the following type. It is part of an unsupported namespace, only types from the namespace 'gw.*' (except gw.transaction.*) are allowed: {0} {1}"},
       {Res.WSDL_REFERENCE_CLASS_WITHOUT_DEFAULT_CONSTRUCTOR.getKey(), "Class {0} has no default constructor and cannot be referenced by a web service. {1}"},   //Maybe this should be a warning.
       {Res.WSDL_REFERENCE_WEBSERVICE.getKey(), "Web Service cannot reference other web service types: {0} {1}"},
       {Res.WSDL_REFERENCE_SOAP_TYPE.getKey(), "Web Services cannot reference types in the soap.* namespace: {0} {1}"},
       {Res.WSDL_REFERENCE_XML_TYPE.getKey(), "RPC Web Services cannot reference xml based types: {0} {1}"},
       {Res.WSDL_READONLY_PROPERTIES.getKey(), "Web Services should not reference types that have read-only properties.  \n"+
                                               "Such types cannot be set a parameter for a web service operation. {0} {1}"},
       {Res.WSDL_WRITEONLY_PROPERTIES.getKey(), "Web Services should not reference types that have write-only properties.  \n"+
                                                "Such types cannot be set as a return type to a web service operation. {0} {1}"},
       {Res.WSDL_REFERENCE_CAUSES_NAMESPACE_COLLISION.getKey(), "This type causes a web services namespace collision.\nThese two types that have the same relative name and would be exposed to Web Services in the same namespace soap.*.{0}.\nRename one of the following types or ensure that it is not referenced in a web service: {1} and {2}.  {3}"},
       {Res.WS_ERR_Annotation_Duplicate_Namespace.getKey(), "Duplicate namespace usage found for parameter \"{0}\": Namespace \"{1}\" is in use by schema \"{2}\", which conflicts with the usage of \"{3}\"."},
       {Res.WS_ERR_Annotation_Exception.getKey(), "Will ignore properties of type {0} see log for stack trace"},
       {Res.WS_ERR_Annotation_Invalid_Namespace.getKey(), "Invalid namespace: {0}"},
       {Res.WS_ERR_Annotation_Only_For_WebService.getKey(), "The annotation @{0} is only usable in classes annotated with @WsiWebService"},
       {Res.WS_ERR_Annotation_Operation_Duplicate.getKey(), "There is already a method with name {0}"},
       {Res.WS_ERR_Annotation_Operation_OneWay_Invalid.getKey(), "One way methods should have void return type"},
       {Res.WS_ERR_Annotation_Operation_Response_Reserved.getKey(), "The suffix 'Response' is reserved for response elements"},
       {Res.WS_ERR_Can_Not_Marshal.getKey(), "Cannot marshal type {0} for {1}"},
       {Res.WS_ERR_Export_Inner_Only_On_WebService.getKey(), "Inner classes are not exportable"},
       {Res.WS_ERR_Export_Inner_Not_Name_Of_Method.getKey(), "Inner classes has same name as request for method {0}"},
       {Res.WS_ERR_Export_Inner_Not_Name_Of_Response.getKey(), "Inner classes has same name as response for method {0}"},
       {Res.WS_ERR_Export_No_Constructor.getKey(), "There is no public default constructor"},
       {Res.WS_ERR_Export_No_Extends.getKey(), "An exportable class cannot extend another class"},
       {Res.WS_ERR_Export_Not_Final.getKey(), "An exportable class must be final"},
       {Res.WS_ERR_Export_Not_WebService.getKey(), "A web service cannot be an exportable class"},
       {Res.WS_ERR_Export_Recursive.getKey(), "Recursion is not supported, you must ensure that {0} is not recursive"},
       {Res.WS_WARN_Annontation_Some_Generators_Dont_Support_Schema.getKey(), "Warning processing parameter {0}, some webservices frameworks may not be able to understand {1}"},
       {Res.WS_WARN_Annontation_Not_Available.getKey(), "{0} not available until {1}"},
       {Res.WS_WARN_Ignored.getKey(), "{0} : Will ignore property {1} of type {2}"},
     };

   //-------------------------------------------------------------------------------------------------
   public Object[][] getContents()
   {
     return contents;
   }
 }
