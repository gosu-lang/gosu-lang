package gw.spec.core.expressions.arithmetic.remainder

uses gw.spec.core.expressions.arithmetic.ArithmeticTestBase

uses gw.util.Rational

class Remainder_RationalTest extends ArithmeticTestBase {

  function testRationalPByteRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % p_byte(0))
    assertEquals(rational("0"), rational("0") % p_byte(1))
    assertEquals(rational("0"), rational("0") % p_byte(-1))
    assertEquals(rational("0"), rational("0") % p_byte(23))
    assertEquals(rational("0"), rational("0") % p_byte(-32))
    assertEquals(rational("0"), rational("0") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % p_byte(0))
    assertEquals(rational("0"), rational("1") % p_byte(1))
    assertEquals(rational("0"), rational("1") % p_byte(-1))
    assertEquals(rational("1"), rational("1") % p_byte(23))
    assertEquals(rational("1"), rational("1") % p_byte(-32))
    assertEquals(rational("1"), rational("1") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % p_byte(0))
    assertEquals(rational("0"), rational("-1") % p_byte(1))
    assertEquals(rational("0"), rational("-1") % p_byte(-1))
    assertEquals(rational("1"), rational("-1") % p_byte(23))
    assertEquals(rational("1"), rational("-1") % p_byte(-32))
    assertEquals(rational("1"), rational("-1") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % p_byte(0))
    assertEquals(rational("0"), rational("23") % p_byte(1))
    assertEquals(rational("0"), rational("23") % p_byte(-1))
    assertEquals(rational("0"), rational("23") % p_byte(23))
    assertEquals(rational("23"), rational("23") % p_byte(-32))
    assertEquals(rational("23"), rational("23") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % p_byte(0))
    assertEquals(rational("0.123"), rational("23.123") % p_byte(1))
    assertEquals(rational("0.123"), rational("23.123") % p_byte(-1))
    assertEquals(rational("0.123"), rational("23.123") % p_byte(23))
    assertEquals(rational("23.123"), rational("23.123") % p_byte(-32))
    assertEquals(rational("23.123"), rational("23.123") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % p_byte(0))
    assertEquals(rational("0"), rational("-32") % p_byte(1))
    assertEquals(rational("0"), rational("-32") % p_byte(-1))
    assertEquals(rational("9"), rational("-32") % p_byte(23))
    assertEquals(rational("0"), rational("-32") % p_byte(-32))
    assertEquals(rational("32"), rational("-32") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % p_byte(0))
    assertEquals(rational("0.456"), rational("-32.456") % p_byte(1))
    assertEquals(rational("0.456"), rational("-32.456") % p_byte(-1))
    assertEquals(rational("9.456"), rational("-32.456") % p_byte(23))
    assertEquals(rational("0.456"), rational("-32.456") % p_byte(-32))
    assertEquals(rational("32.456"), rational("-32.456") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % p_byte(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(-32))
    assertEquals(rational("100.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("82.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % p_byte(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(-32))
    assertEquals(rational("100.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(Byte.MAX_VALUE))
    assertEquals(rational("82.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(Byte.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % p_byte(0)))
  }

  function testRationalByteRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % b_byte(0))
    assertEquals(rational("0"), rational("0") % p_byte(1))
    assertEquals(rational("0"), rational("0") % p_byte(-1))
    assertEquals(rational("0"), rational("0") % b_byte(23))
    assertEquals(rational("0"), rational("0") % b_byte(-32))
    assertEquals(rational("0"), rational("0") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % b_byte(0))
    assertEquals(rational("0"), rational("1") % p_byte(1))
    assertEquals(rational("0"), rational("1") % p_byte(-1))
    assertEquals(rational("1"), rational("1") % b_byte(23))
    assertEquals(rational("1"), rational("1") % b_byte(-32))
    assertEquals(rational("1"), rational("1") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % b_byte(0))
    assertEquals(rational("0"), rational("-1") % p_byte(1))
    assertEquals(rational("0"), rational("-1") % p_byte(-1))
    assertEquals(rational("1"), rational("-1") % b_byte(23))
    assertEquals(rational("1"), rational("-1") % b_byte(-32))
    assertEquals(rational("1"), rational("-1") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % b_byte(0))
    assertEquals(rational("0"), rational("23") % p_byte(1))
    assertEquals(rational("0"), rational("23") % p_byte(-1))
    assertEquals(rational("0"), rational("23") % b_byte(23))
    assertEquals(rational("23"), rational("23") % b_byte(-32))
    assertEquals(rational("23"), rational("23") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % b_byte(0))
    assertEquals(rational("0.123"), rational("23.123") % p_byte(1))
    assertEquals(rational("0.123"), rational("23.123") % p_byte(-1))
    assertEquals(rational("0.123"), rational("23.123") % b_byte(23))
    assertEquals(rational("23.123"), rational("23.123") % b_byte(-32))
    assertEquals(rational("23.123"), rational("23.123") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % b_byte(0))
    assertEquals(rational("0"), rational("-32") % p_byte(1))
    assertEquals(rational("0"), rational("-32") % p_byte(-1))
    assertEquals(rational("9"), rational("-32") % b_byte(23))
    assertEquals(rational("0"), rational("-32") % b_byte(-32))
    assertEquals(rational("32"), rational("-32") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % b_byte(0))
    assertEquals(rational("0.456"), rational("-32.456") % p_byte(1))
    assertEquals(rational("0.456"), rational("-32.456") % p_byte(-1))
    assertEquals(rational("9.456"), rational("-32.456") % b_byte(23))
    assertEquals(rational("0.456"), rational("-32.456") % b_byte(-32))
    assertEquals(rational("32.456"), rational("-32.456") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % b_byte(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % b_byte(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % b_byte(-32))
    assertEquals(rational("100.123456789"), rational("123456789012345678901234567890.123456789") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("82.123456789"), rational("123456789012345678901234567890.123456789") % b_byte(Byte.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % b_byte(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_byte(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % b_byte(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % b_byte(-32))
    assertEquals(rational("100.123456789"), rational("-123456789012345678901234567890.123456789") % b_byte(Byte.MAX_VALUE))
    assertEquals(rational("82.123456789"), rational("-123456789012345678901234567890.123456789") % b_byte(Byte.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % b_byte(0)))
  }

  function testRationalPShortRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % p_short(0))
    assertEquals(rational("0"), rational("0") % p_short(1))
    assertEquals(rational("0"), rational("0") % p_short(-1))
    assertEquals(rational("0"), rational("0") % p_short(23))
    assertEquals(rational("0"), rational("0") % p_short(-32))
    assertEquals(rational("0"), rational("0") % p_short(Short.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % p_short(0))
    assertEquals(rational("0"), rational("1") % p_short(1))
    assertEquals(rational("0"), rational("1") % p_short(-1))
    assertEquals(rational("1"), rational("1") % p_short(23))
    assertEquals(rational("1"), rational("1") % p_short(-32))
    assertEquals(rational("1"), rational("1") % p_short(Short.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % p_short(0))
    assertEquals(rational("0"), rational("-1") % p_short(1))
    assertEquals(rational("0"), rational("-1") % p_short(-1))
    assertEquals(rational("1"), rational("-1") % p_short(23))
    assertEquals(rational("1"), rational("-1") % p_short(-32))
    assertEquals(rational("1"), rational("-1") % p_short(Short.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % p_short(0))
    assertEquals(rational("0"), rational("23") % p_short(1))
    assertEquals(rational("0"), rational("23") % p_short(-1))
    assertEquals(rational("0"), rational("23") % p_short(23))
    assertEquals(rational("23"), rational("23") % p_short(-32))
    assertEquals(rational("23"), rational("23") % p_short(Short.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % p_short(0))
    assertEquals(rational("0.123"), rational("23.123") % p_short(1))
    assertEquals(rational("0.123"), rational("23.123") % p_short(-1))
    assertEquals(rational("0.123"), rational("23.123") % p_short(23))
    assertEquals(rational("23.123"), rational("23.123") % p_short(-32))
    assertEquals(rational("23.123"), rational("23.123") % p_short(Short.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % p_short(0))
    assertEquals(rational("0"), rational("-32") % p_short(1))
    assertEquals(rational("0"), rational("-32") % p_short(-1))
    assertEquals(rational("9"), rational("-32") % p_short(23))
    assertEquals(rational("0"), rational("-32") % p_short(-32))
    assertEquals(rational("32"), rational("-32") % p_short(Short.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % p_short(0))
    assertEquals(rational("0.456"), rational("-32.456") % p_short(1))
    assertEquals(rational("0.456"), rational("-32.456") % p_short(-1))
    assertEquals(rational("9.456"), rational("-32.456") % p_short(23))
    assertEquals(rational("0.456"), rational("-32.456") % p_short(-32))
    assertEquals(rational("32.456"), rational("-32.456") % p_short(Short.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % p_short(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_short(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_short(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % p_short(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % p_short(-32))
    assertEquals(rational("9114.123456789"), rational("123456789012345678901234567890.123456789") % p_short(Short.MAX_VALUE))
    assertEquals(rational("2770.123456789"), rational("123456789012345678901234567890.123456789") % p_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % p_short(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_short(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_short(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % p_short(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % p_short(-32))
    assertEquals(rational("9114.123456789"), rational("-123456789012345678901234567890.123456789") % p_short(Short.MAX_VALUE))
    assertEquals(rational("2770.123456789"), rational("-123456789012345678901234567890.123456789") % p_short(Short.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % p_short(0)))
  }

  function testRationalShortRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % b_short(0))
    assertEquals(rational("0"), rational("0") % b_short(1))
    assertEquals(rational("0"), rational("0") % b_short(-1))
    assertEquals(rational("0"), rational("0") % b_short(23))
    assertEquals(rational("0"), rational("0") % b_short(-32))
    assertEquals(rational("0"), rational("0") % b_short(Short.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % b_short(0))
    assertEquals(rational("0"), rational("1") % b_short(1))
    assertEquals(rational("0"), rational("1") % b_short(-1))
    assertEquals(rational("1"), rational("1") % b_short(23))
    assertEquals(rational("1"), rational("1") % b_short(-32))
    assertEquals(rational("1"), rational("1") % b_short(Short.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % b_short(0))
    assertEquals(rational("0"), rational("-1") % b_short(1))
    assertEquals(rational("0"), rational("-1") % b_short(-1))
    assertEquals(rational("1"), rational("-1") % b_short(23))
    assertEquals(rational("1"), rational("-1") % b_short(-32))
    assertEquals(rational("1"), rational("-1") % b_short(Short.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % b_short(0))
    assertEquals(rational("0"), rational("23") % b_short(1))
    assertEquals(rational("0"), rational("23") % b_short(-1))
    assertEquals(rational("0"), rational("23") % b_short(23))
    assertEquals(rational("23"), rational("23") % b_short(-32))
    assertEquals(rational("23"), rational("23") % b_short(Short.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % b_short(0))
    assertEquals(rational("0.123"), rational("23.123") % b_short(1))
    assertEquals(rational("0.123"), rational("23.123") % b_short(-1))
    assertEquals(rational("0.123"), rational("23.123") % b_short(23))
    assertEquals(rational("23.123"), rational("23.123") % b_short(-32))
    assertEquals(rational("23.123"), rational("23.123") % b_short(Short.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % b_short(0))
    assertEquals(rational("0"), rational("-32") % b_short(1))
    assertEquals(rational("0"), rational("-32") % b_short(-1))
    assertEquals(rational("9"), rational("-32") % b_short(23))
    assertEquals(rational("0"), rational("-32") % b_short(-32))
    assertEquals(rational("32"), rational("-32") % b_short(Short.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % b_short(0))
    assertEquals(rational("0.456"), rational("-32.456") % b_short(1))
    assertEquals(rational("0.456"), rational("-32.456") % b_short(-1))
    assertEquals(rational("9.456"), rational("-32.456") % b_short(23))
    assertEquals(rational("0.456"), rational("-32.456") % b_short(-32))
    assertEquals(rational("32.456"), rational("-32.456") % b_short(Short.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % b_short(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_short(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_short(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % b_short(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % b_short(-32))
    assertEquals(rational("9114.123456789"), rational("123456789012345678901234567890.123456789") % b_short(Short.MAX_VALUE))
    assertEquals(rational("2770.123456789"), rational("123456789012345678901234567890.123456789") % b_short(Short.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % b_short(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_short(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_short(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % b_short(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % b_short(-32))
    assertEquals(rational("9114.123456789"), rational("-123456789012345678901234567890.123456789") % b_short(Short.MAX_VALUE))
    assertEquals(rational("2770.123456789"), rational("-123456789012345678901234567890.123456789") % b_short(Short.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % b_short(0)))
  }

  function testRationalPCharRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % p_char(0))
    assertEquals(rational("0"), rational("0") % p_char(1))
    assertEquals(rational("0"), rational("0") % p_char(23))
    assertEquals(rational("0"), rational("0") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % p_char(0))
    assertEquals(rational("0"), rational("1") % p_char(1))
    assertEquals(rational("1"), rational("1") % p_char(23))
    assertEquals(rational("1"), rational("1") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % p_char(0))
    assertEquals(rational("0"), rational("-1") % p_char(1))
    assertEquals(rational("1"), rational("-1") % p_char(23))
    assertEquals(rational("1"), rational("-1") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % p_char(0))
    assertEquals(rational("0"), rational("23") % p_char(1))
    assertEquals(rational("0"), rational("23") % p_char(23))
    assertEquals(rational("23"), rational("23") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % p_char(0))
    assertEquals(rational("0.123"), rational("23.123") % p_char(1))
    assertEquals(rational("0.123"), rational("23.123") % p_char(23))
    assertEquals(rational("23.123"), rational("23.123") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % p_char(0))
    assertEquals(rational("0"), rational("-32") % p_char(1))
    assertEquals(rational("9"), rational("-32") % p_char(23))
    assertEquals(rational("32"), rational("-32") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % p_char(0))
    assertEquals(rational("0.456"), rational("-32.456") % p_char(1))
    assertEquals(rational("9.456"), rational("-32.456") % p_char(23))
    assertEquals(rational("32.456"), rational("-32.456") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % p_char(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_char(1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % p_char(23))
    assertEquals(rational("40020.123456789"), rational("123456789012345678901234567890.123456789") % p_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % p_char(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_char(1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % p_char(23))
    assertEquals(rational("40020.123456789"), rational("-123456789012345678901234567890.123456789") % p_char(Character.MAX_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % p_char(0)))
  }

  function testRationalCharacterRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % b_char(0))
    assertEquals(rational("0"), rational("0") % b_char(1))
    assertEquals(rational("0"), rational("0") % b_char(23))
    assertEquals(rational("0"), rational("0") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % b_char(0))
    assertEquals(rational("0"), rational("1") % b_char(1))
    assertEquals(rational("1"), rational("1") % b_char(23))
    assertEquals(rational("1"), rational("1") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % b_char(0))
    assertEquals(rational("0"), rational("-1") % b_char(1))
    assertEquals(rational("1"), rational("-1") % b_char(23))
    assertEquals(rational("1"), rational("-1") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % b_char(0))
    assertEquals(rational("0"), rational("23") % b_char(1))
    assertEquals(rational("0"), rational("23") % b_char(23))
    assertEquals(rational("23"), rational("23") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % b_char(0))
    assertEquals(rational("0.123"), rational("23.123") % b_char(1))
    assertEquals(rational("0.123"), rational("23.123") % b_char(23))
    assertEquals(rational("23.123"), rational("23.123") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % b_char(0))
    assertEquals(rational("0"), rational("-32") % b_char(1))
    assertEquals(rational("9"), rational("-32") % b_char(23))
    assertEquals(rational("32"), rational("-32") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % b_char(0))
    assertEquals(rational("0.456"), rational("-32.456") % b_char(1))
    assertEquals(rational("9.456"), rational("-32.456") % b_char(23))
    assertEquals(rational("32.456"), rational("-32.456") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % b_char(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_char(1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % b_char(23))
    assertEquals(rational("40020.123456789"), rational("123456789012345678901234567890.123456789") % b_char(Character.MAX_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % b_char(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_char(1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % b_char(23))
    assertEquals(rational("40020.123456789"), rational("-123456789012345678901234567890.123456789") % b_char(Character.MAX_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % b_char(0)))
  }

  function testRationalPIntRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % p_int(0))
    assertEquals(rational("0"), rational("0") % p_int(1))
    assertEquals(rational("0"), rational("0") % p_int(-1))
    assertEquals(rational("0"), rational("0") % p_int(23))
    assertEquals(rational("0"), rational("0") % p_int(-32))
    assertEquals(rational("0"), rational("0") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % p_int(0))
    assertEquals(rational("0"), rational("1") % p_int(1))
    assertEquals(rational("0"), rational("1") % p_int(-1))
    assertEquals(rational("1"), rational("1") % p_int(23))
    assertEquals(rational("1"), rational("1") % p_int(-32))
    assertEquals(rational("1"), rational("1") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % p_int(0))
    assertEquals(rational("0"), rational("-1") % p_int(1))
    assertEquals(rational("0"), rational("-1") % p_int(-1))
    assertEquals(rational("1"), rational("-1") % p_int(23))
    assertEquals(rational("1"), rational("-1") % p_int(-32))
    assertEquals(rational("1"), rational("-1") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % p_int(0))
    assertEquals(rational("0"), rational("23") % p_int(1))
    assertEquals(rational("0"), rational("23") % p_int(-1))
    assertEquals(rational("0"), rational("23") % p_int(23))
    assertEquals(rational("23"), rational("23") % p_int(-32))
    assertEquals(rational("23"), rational("23") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % p_int(0))
    assertEquals(rational("0.123"), rational("23.123") % p_int(1))
    assertEquals(rational("0.123"), rational("23.123") % p_int(-1))
    assertEquals(rational("0.123"), rational("23.123") % p_int(23))
    assertEquals(rational("23.123"), rational("23.123") % p_int(-32))
    assertEquals(rational("23.123"), rational("23.123") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % p_int(0))
    assertEquals(rational("0"), rational("-32") % p_int(1))
    assertEquals(rational("0"), rational("-32") % p_int(-1))
    assertEquals(rational("9"), rational("-32") % p_int(23))
    assertEquals(rational("0"), rational("-32") % p_int(-32))
    assertEquals(rational("32"), rational("-32") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % p_int(0))
    assertEquals(rational("0.456"), rational("-32.456") % p_int(1))
    assertEquals(rational("0.456"), rational("-32.456") % p_int(-1))
    assertEquals(rational("9.456"), rational("-32.456") % p_int(23))
    assertEquals(rational("0.456"), rational("-32.456") % p_int(-32))
    assertEquals(rational("32.456"), rational("-32.456") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % p_int(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_int(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_int(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % p_int(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % p_int(-32))
    assertEquals(rational("281742486.123456789"), rational("123456789012345678901234567890.123456789") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("1312754386.123456789"), rational("123456789012345678901234567890.123456789") % p_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % p_int(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_int(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_int(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % p_int(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % p_int(-32))
    assertEquals(rational("281742486.123456789"), rational("-123456789012345678901234567890.123456789") % p_int(Integer.MAX_VALUE))
    assertEquals(rational("1312754386.123456789"), rational("-123456789012345678901234567890.123456789") % p_int(Integer.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % p_int(0)))
  }

  function testRationalIntegerRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % b_int(0))
    assertEquals(rational("0"), rational("0") % b_int(1))
    assertEquals(rational("0"), rational("0") % b_int(-1))
    assertEquals(rational("0"), rational("0") % b_int(23))
    assertEquals(rational("0"), rational("0") % b_int(-32))
    assertEquals(rational("0"), rational("0") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % b_int(0))
    assertEquals(rational("0"), rational("1") % b_int(1))
    assertEquals(rational("0"), rational("1") % b_int(-1))
    assertEquals(rational("1"), rational("1") % b_int(23))
    assertEquals(rational("1"), rational("1") % b_int(-32))
    assertEquals(rational("1"), rational("1") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % b_int(0))
    assertEquals(rational("0"), rational("-1") % b_int(1))
    assertEquals(rational("0"), rational("-1") % b_int(-1))
    assertEquals(rational("1"), rational("-1") % b_int(23))
    assertEquals(rational("1"), rational("-1") % b_int(-32))
    assertEquals(rational("1"), rational("-1") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % b_int(0))
    assertEquals(rational("0"), rational("23") % b_int(1))
    assertEquals(rational("0"), rational("23") % b_int(-1))
    assertEquals(rational("0"), rational("23") % b_int(23))
    assertEquals(rational("23"), rational("23") % b_int(-32))
    assertEquals(rational("23"), rational("23") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % b_int(0))
    assertEquals(rational("0.123"), rational("23.123") % b_int(1))
    assertEquals(rational("0.123"), rational("23.123") % b_int(-1))
    assertEquals(rational("0.123"), rational("23.123") % b_int(23))
    assertEquals(rational("23.123"), rational("23.123") % b_int(-32))
    assertEquals(rational("23.123"), rational("23.123") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % b_int(0))
    assertEquals(rational("0"), rational("-32") % b_int(1))
    assertEquals(rational("0"), rational("-32") % b_int(-1))
    assertEquals(rational("9"), rational("-32") % b_int(23))
    assertEquals(rational("0"), rational("-32") % b_int(-32))
    assertEquals(rational("32"), rational("-32") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % b_int(0))
    assertEquals(rational("0.456"), rational("-32.456") % b_int(1))
    assertEquals(rational("0.456"), rational("-32.456") % b_int(-1))
    assertEquals(rational("9.456"), rational("-32.456") % b_int(23))
    assertEquals(rational("0.456"), rational("-32.456") % b_int(-32))
    assertEquals(rational("32.456"), rational("-32.456") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % b_int(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_int(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_int(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % b_int(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % b_int(-32))
    assertEquals(rational("281742486.123456789"), rational("123456789012345678901234567890.123456789") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("1312754386.123456789"), rational("123456789012345678901234567890.123456789") % b_int(Integer.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % b_int(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_int(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_int(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % b_int(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % b_int(-32))
    assertEquals(rational("281742486.123456789"), rational("-123456789012345678901234567890.123456789") % b_int(Integer.MAX_VALUE))
    assertEquals(rational("1312754386.123456789"), rational("-123456789012345678901234567890.123456789") % b_int(Integer.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % b_int(0)))
  }

  function testRationalPLongRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % p_long(0))
    assertEquals(rational("0"), rational("0") % p_long(1))
    assertEquals(rational("0"), rational("0") % p_long(-1))
    assertEquals(rational("0"), rational("0") % p_long(23))
    assertEquals(rational("0"), rational("0") % p_long(-32))
    assertEquals(rational("0"), rational("0") % p_long(Long.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % p_long(0))
    assertEquals(rational("0"), rational("1") % p_long(1))
    assertEquals(rational("0"), rational("1") % p_long(-1))
    assertEquals(rational("1"), rational("1") % p_long(23))
    assertEquals(rational("1"), rational("1") % p_long(-32))
    assertEquals(rational("1"), rational("1") % p_long(Long.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % p_long(0))
    assertEquals(rational("0"), rational("-1") % p_long(1))
    assertEquals(rational("0"), rational("-1") % p_long(-1))
    assertEquals(rational("1"), rational("-1") % p_long(23))
    assertEquals(rational("1"), rational("-1") % p_long(-32))
    assertEquals(rational("1"), rational("-1") % p_long(Long.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % p_long(0))
    assertEquals(rational("0"), rational("23") % p_long(1))
    assertEquals(rational("0"), rational("23") % p_long(-1))
    assertEquals(rational("0"), rational("23") % p_long(23))
    assertEquals(rational("23"), rational("23") % p_long(-32))
    assertEquals(rational("23"), rational("23") % p_long(Long.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % p_long(0))
    assertEquals(rational("0.123"), rational("23.123") % p_long(1))
    assertEquals(rational("0.123"), rational("23.123") % p_long(-1))
    assertEquals(rational("0.123"), rational("23.123") % p_long(23))
    assertEquals(rational("23.123"), rational("23.123") % p_long(-32))
    assertEquals(rational("23.123"), rational("23.123") % p_long(Long.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % p_long(0))
    assertEquals(rational("0"), rational("-32") % p_long(1))
    assertEquals(rational("0"), rational("-32") % p_long(-1))
    assertEquals(rational("9"), rational("-32") % p_long(23))
    assertEquals(rational("0"), rational("-32") % p_long(-32))
    assertEquals(rational("32"), rational("-32") % p_long(Long.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % p_long(0))
    assertEquals(rational("0.456"), rational("-32.456") % p_long(1))
    assertEquals(rational("0.456"), rational("-32.456") % p_long(-1))
    assertEquals(rational("9.456"), rational("-32.456") % p_long(23))
    assertEquals(rational("0.456"), rational("-32.456") % p_long(-32))
    assertEquals(rational("32.456"), rational("-32.456") % p_long(Long.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % p_long(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_long(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_long(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % p_long(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % p_long(-32))
    assertEquals(rational("4860475750367701695.123456789"), rational("123456789012345678901234567890.123456789") % p_long(Long.MAX_VALUE))
    assertEquals(rational("4860475736982489810.123456789"), rational("123456789012345678901234567890.123456789") % p_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % p_long(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_long(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_long(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % p_long(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % p_long(-32))
    assertEquals(rational("4860475750367701695.123456789"), rational("-123456789012345678901234567890.123456789") % p_long(Long.MAX_VALUE))
    assertEquals(rational("4860475736982489810.123456789"), rational("-123456789012345678901234567890.123456789") % p_long(Long.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % p_long(0)))
  }

  function testRationalLongRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % b_long(0))
    assertEquals(rational("0"), rational("0") % b_long(1))
    assertEquals(rational("0"), rational("0") % b_long(-1))
    assertEquals(rational("0"), rational("0") % b_long(23))
    assertEquals(rational("0"), rational("0") % b_long(-32))
    assertEquals(rational("0"), rational("0") % b_long(Long.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % b_long(0))
    assertEquals(rational("0"), rational("1") % b_long(1))
    assertEquals(rational("0"), rational("1") % b_long(-1))
    assertEquals(rational("1"), rational("1") % b_long(23))
    assertEquals(rational("1"), rational("1") % b_long(-32))
    assertEquals(rational("1"), rational("1") % b_long(Long.MAX_VALUE))
    assertEquals(rational("1"), rational("1") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % b_long(0))
    assertEquals(rational("0"), rational("-1") % b_long(1))
    assertEquals(rational("0"), rational("-1") % b_long(-1))
    assertEquals(rational("1"), rational("-1") % b_long(23))
    assertEquals(rational("1"), rational("-1") % b_long(-32))
    assertEquals(rational("1"), rational("-1") % b_long(Long.MAX_VALUE))
    assertEquals(rational("1"), rational("-1") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % b_long(0))
    assertEquals(rational("0"), rational("23") % b_long(1))
    assertEquals(rational("0"), rational("23") % b_long(-1))
    assertEquals(rational("0"), rational("23") % b_long(23))
    assertEquals(rational("23"), rational("23") % b_long(-32))
    assertEquals(rational("23"), rational("23") % b_long(Long.MAX_VALUE))
    assertEquals(rational("23"), rational("23") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % b_long(0))
    assertEquals(rational("0.123"), rational("23.123") % b_long(1))
    assertEquals(rational("0.123"), rational("23.123") % b_long(-1))
    assertEquals(rational("0.123"), rational("23.123") % b_long(23))
    assertEquals(rational("23.123"), rational("23.123") % b_long(-32))
    assertEquals(rational("23.123"), rational("23.123") % b_long(Long.MAX_VALUE))
    assertEquals(rational("23.123"), rational("23.123") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % b_long(0))
    assertEquals(rational("0"), rational("-32") % b_long(1))
    assertEquals(rational("0"), rational("-32") % b_long(-1))
    assertEquals(rational("9"), rational("-32") % b_long(23))
    assertEquals(rational("0"), rational("-32") % b_long(-32))
    assertEquals(rational("32"), rational("-32") % b_long(Long.MAX_VALUE))
    assertEquals(rational("32"), rational("-32") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % b_long(0))
    assertEquals(rational("0.456"), rational("-32.456") % b_long(1))
    assertEquals(rational("0.456"), rational("-32.456") % b_long(-1))
    assertEquals(rational("9.456"), rational("-32.456") % b_long(23))
    assertEquals(rational("0.456"), rational("-32.456") % b_long(-32))
    assertEquals(rational("32.456"), rational("-32.456") % b_long(Long.MAX_VALUE))
    assertEquals(rational("32.456"), rational("-32.456") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % b_long(0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_long(1))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_long(-1))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % b_long(23))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % b_long(-32))
    assertEquals(rational("4860475750367701695.123456789"), rational("123456789012345678901234567890.123456789") % b_long(Long.MAX_VALUE))
    assertEquals(rational("4860475736982489810.123456789"), rational("123456789012345678901234567890.123456789") % b_long(Long.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % b_long(0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_long(1))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_long(-1))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % b_long(23))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % b_long(-32))
    assertEquals(rational("4860475750367701695.123456789"), rational("-123456789012345678901234567890.123456789") % b_long(Long.MAX_VALUE))
    assertEquals(rational("4860475736982489810.123456789"), rational("-123456789012345678901234567890.123456789") % b_long(Long.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % b_long(0)))
  }

  function testRationalPFloatRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % p_float(0.0))
    assertEquals(rational("0"), rational("0") % p_float(1.0))
    assertEquals(rational("0"), rational("0") % p_float(-1.0))
    assertEquals(rational("0"), rational("0") % p_float(23.0))
    assertEquals(rational("0"), rational("0") % p_float(23.123))
    assertEquals(rational("0"), rational("0") % p_float(-32.0))
    assertEquals(rational("0"), rational("0") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("0") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - p_float(Float.NaN_))
    assertEquals(rational("0"), rational("0") % p_float(Float.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % p_float(0.0))
    assertEquals(rational("0.0"), rational("1") % p_float(1.0))
    assertEquals(rational("0.0"), rational("1") % p_float(-1.0))
    assertEquals(rational("1"), rational("1") % p_float(23.0))
    assertEquals(rational("1"), rational("1") % p_float(23.123))
    assertEquals(rational("1"), rational("1") % p_float(-32.0))
    assertEquals(rational("1"), rational("1") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - p_float(Float.NaN_))
    assertEquals(rational("1"), rational("1") % p_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("1") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % p_float(0.0))
    assertEquals(rational("0.0"), rational("-1") % p_float(1.0))
    assertEquals(rational("0.0"), rational("-1") % p_float(-1.0))
    assertEquals(rational("1"), rational("-1") % p_float(23.0))
    assertEquals(rational("1"), rational("-1") % p_float(23.123))
    assertEquals(rational("1"), rational("-1") % p_float(-32.0))
    assertEquals(rational("1"), rational("-1") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("-1") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - p_float(Float.NaN_))
    assertEquals(rational("1"), rational("-1") % p_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("-1") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % p_float(0.0))
    assertEquals(rational("0.0"), rational("23") % p_float(1.0))
    assertEquals(rational("0.0"), rational("23") % p_float(-1.0))
    assertEquals(rational("0.0"), rational("23") % p_float(23.0))
    assertEquals(rational("23"), rational("23") % p_float(23.123))
    assertEquals(rational("23"), rational("23") % p_float(-32.0))
    assertEquals(rational("23"), rational("23") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("23") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - p_float(Float.NaN_))
    assertEquals(rational("23"), rational("23") % p_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("23") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % p_float(0.0))
    assertEquals(rational("0.123"), rational("23.123") % p_float(1.0))
    assertEquals(rational("0.123"), rational("23.123") % p_float(-1.0))
    assertEquals(rational("0.123"), rational("23.123") % p_float(23.0))
    assertEquals(rational("0.000"), rational("23.123") % p_float(23.123))
    assertEquals(rational("23.123"), rational("23.123") % p_float(-32.0))
    assertEquals(rational("23.123"), rational("23.123") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("23.123") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - p_float(Float.NaN_))
    assertEquals(rational("23.123"), rational("23.123") % p_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("23.123") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % p_float(0.0))
    assertEquals(rational("0.0"), rational("-32") % p_float(1.0))
    assertEquals(rational("0.0"), rational("-32") % p_float(-1.0))
    assertEquals(rational("9.0"), rational("-32") % p_float(23.0))
    assertEquals(rational("8.877"), rational("-32") % p_float(23.123))
    assertEquals(rational("0.0"), rational("-32") % p_float(-32.0))
    assertEquals(rational("32"), rational("-32") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("-32") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - p_float(Float.NaN_))
    assertEquals(rational("32"), rational("-32") % p_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("-32") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % p_float(0.0))
    assertEquals(rational("0.456"), rational("-32.456") % p_float(1.0))
    assertEquals(rational("0.456"), rational("-32.456") % p_float(-1.0))
    assertEquals(rational("9.456"), rational("-32.456") % p_float(23.0))
    assertEquals(rational("9.333"), rational("-32.456") % p_float(23.123))
    assertEquals(rational("0.456"), rational("-32.456") % p_float(-32.0))
    assertEquals(rational("0.000"), rational("-32.456") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("-32.456") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - p_float(Float.NaN_))
    assertEquals(rational("32.456"), rational("-32.456") % p_float(Float.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-32.456") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % p_float(0.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_float(1.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_float(-1.0))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % p_float(23.0))
    assertEquals(rational("15.652456789"), rational("123456789012345678901234567890.123456789") % p_float(23.123))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % p_float(-32.0))
    assertEquals(rational("2.339456789"), rational("123456789012345678901234567890.123456789") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("123456789012345678901234567890.123456789") % p_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("123456789012345678901234567890.123456789") % p_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % p_float(0.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_float(1.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_float(-1.0))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % p_float(23.0))
    assertEquals(rational("15.652456789"), rational("-123456789012345678901234567890.123456789") % p_float(23.123))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % p_float(-32.0))
    assertEquals(rational("2.339456789"), rational("-123456789012345678901234567890.123456789") % p_float(-32.456))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - p_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - p_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - p_float(Float.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("-123456789012345678901234567890.123456789") % p_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("-123456789012345678901234567890.123456789") % p_float(Float.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % p_float(0.0)))
  }

  function testRationalFloatRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % b_float(0.0))
    assertEquals(rational("0"), rational("0") % b_float(1.0))
    assertEquals(rational("0"), rational("0") % b_float(-1.0))
    assertEquals(rational("0"), rational("0") % b_float(23.0))
    assertEquals(rational("0"), rational("0") % b_float(23.123))
    assertEquals(rational("0"), rational("0") % b_float(-32.0))
    assertEquals(rational("0"), rational("0") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("0") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - b_float(Float.NaN_))
    assertEquals(rational("0"), rational("0") % b_float(Float.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % b_float(0.0))
    assertEquals(rational("0.0"), rational("1") % b_float(1.0))
    assertEquals(rational("0.0"), rational("1") % b_float(-1.0))
    assertEquals(rational("1"), rational("1") % b_float(23.0))
    assertEquals(rational("1"), rational("1") % b_float(23.123))
    assertEquals(rational("1"), rational("1") % b_float(-32.0))
    assertEquals(rational("1"), rational("1") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - b_float(Float.NaN_))
    assertEquals(rational("1"), rational("1") % b_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("1") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % b_float(0.0))
    assertEquals(rational("0.0"), rational("-1") % b_float(1.0))
    assertEquals(rational("0.0"), rational("-1") % b_float(-1.0))
    assertEquals(rational("1"), rational("-1") % b_float(23.0))
    assertEquals(rational("1"), rational("-1") % b_float(23.123))
    assertEquals(rational("1"), rational("-1") % b_float(-32.0))
    assertEquals(rational("1"), rational("-1") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("-1") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - b_float(Float.NaN_))
    assertEquals(rational("1"), rational("-1") % b_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("-1") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % b_float(0.0))
    assertEquals(rational("0.0"), rational("23") % b_float(1.0))
    assertEquals(rational("0.0"), rational("23") % b_float(-1.0))
    assertEquals(rational("0.0"), rational("23") % b_float(23.0))
    assertEquals(rational("23"), rational("23") % b_float(23.123))
    assertEquals(rational("23"), rational("23") % b_float(-32.0))
    assertEquals(rational("23"), rational("23") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("23") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - b_float(Float.NaN_))
    assertEquals(rational("23"), rational("23") % b_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("23") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % b_float(0.0))
    assertEquals(rational("0.123"), rational("23.123") % b_float(1.0))
    assertEquals(rational("0.123"), rational("23.123") % b_float(-1.0))
    assertEquals(rational("0.123"), rational("23.123") % b_float(23.0))
    assertEquals(rational("0.000"), rational("23.123") % b_float(23.123))
    assertEquals(rational("23.123"), rational("23.123") % b_float(-32.0))
    assertEquals(rational("23.123"), rational("23.123") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("23.123") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - b_float(Float.NaN_))
    assertEquals(rational("23.123"), rational("23.123") % b_float(Float.MAX_VALUE))
   // // assertThrowsArithmeticException("Division impossible", \ -> rational("23.123") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % b_float(0.0))
    assertEquals(rational("0.0"), rational("-32") % b_float(1.0))
    assertEquals(rational("0.0"), rational("-32") % b_float(-1.0))
    assertEquals(rational("9.0"), rational("-32") % b_float(23.0))
    assertEquals(rational("8.877"), rational("-32") % b_float(23.123))
    assertEquals(rational("0.0"), rational("-32") % b_float(-32.0))
    assertEquals(rational("32"), rational("-32") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("-32") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - b_float(Float.NaN_))
    assertEquals(rational("32"), rational("-32") % b_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("-32") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % b_float(0.0))
    assertEquals(rational("0.456"), rational("-32.456") % b_float(1.0))
    assertEquals(rational("0.456"), rational("-32.456") % b_float(-1.0))
    assertEquals(rational("9.456"), rational("-32.456") % b_float(23.0))
    assertEquals(rational("9.333"), rational("-32.456") % b_float(23.123))
    assertEquals(rational("0.456"), rational("-32.456") % b_float(-32.0))
    assertEquals(rational("0.000"), rational("-32.456") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("-32.456") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - b_float(Float.NaN_))
    assertEquals(rational("32.456"), rational("-32.456") % b_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("-32.456") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % b_float(0.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_float(1.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_float(-1.0))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % b_float(23.0))
    assertEquals(rational("15.652456789"), rational("123456789012345678901234567890.123456789") % b_float(23.123))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % b_float(-32.0))
    assertEquals(rational("2.339456789"), rational("123456789012345678901234567890.123456789") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("123456789012345678901234567890.123456789") % b_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("123456789012345678901234567890.123456789") % b_float(Float.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % b_float(0.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_float(1.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_float(-1.0))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % b_float(23.0))
    assertEquals(rational("15.652456789"), rational("-123456789012345678901234567890.123456789") % b_float(23.123))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % b_float(-32.0))
    assertEquals(rational("2.339456789"), rational("-123456789012345678901234567890.123456789") % b_float(-32.456))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - b_float(Float.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - b_float(Float.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - b_float(Float.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("-123456789012345678901234567890.123456789") % b_float(Float.MAX_VALUE))
    //// assertThrowsArithmeticException("Division impossible", \ -> rational("-123456789012345678901234567890.123456789") % b_float(Float.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % b_float(0.0)))
  }

  function testRationalPDoubleRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % p_double(0.0))
    assertEquals(rational("0"), rational("0") % p_double(1.0))
    assertEquals(rational("0"), rational("0") % p_double(-1.0))
    assertEquals(rational("0"), rational("0") % p_double(23.0))
    assertEquals(rational("0"), rational("0") % p_double(23.123))
    assertEquals(rational("0"), rational("0") % p_double(-32.0))
    assertEquals(rational("0"), rational("0") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("0") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - p_double(Double.NaN_))
    assertEquals(rational("0"), rational("0") % p_double(Double.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % p_double(0.0))
    assertEquals(rational("0.0"), rational("1") % p_double(1.0))
    assertEquals(rational("0.0"), rational("1") % p_double(-1.0))
    assertEquals(rational("1"), rational("1") % p_double(23.0))
    assertEquals(rational("1"), rational("1") % p_double(23.123))
    assertEquals(rational("1"), rational("1") % p_double(-32.0))
    assertEquals(rational("1"), rational("1") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - p_double(Double.NaN_))
    assertEquals(rational("1"), rational("1") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("1") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % p_double(0.0))
    assertEquals(rational("0.0"), rational("-1") % p_double(1.0))
    assertEquals(rational("0.0"), rational("-1") % p_double(-1.0))
    assertEquals(rational("1"), rational("-1") % p_double(23.0))
    assertEquals(rational("1"), rational("-1") % p_double(23.123))
    assertEquals(rational("1"), rational("-1") % p_double(-32.0))
    assertEquals(rational("1"), rational("-1") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("-1") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - p_double(Double.NaN_))
    assertEquals(rational("1"), rational("-1") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-1") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % p_double(0.0))
    assertEquals(rational("0.0"), rational("23") % p_double(1.0))
    assertEquals(rational("0.0"), rational("23") % p_double(-1.0))
    assertEquals(rational("0.0"), rational("23") % p_double(23.0))
    assertEquals(rational("23"), rational("23") % p_double(23.123))
    assertEquals(rational("23"), rational("23") % p_double(-32.0))
    assertEquals(rational("23"), rational("23") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("23") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - p_double(Double.NaN_))
    assertEquals(rational("23"), rational("23") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("23") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % p_double(0.0))
    assertEquals(rational("0.123"), rational("23.123") % p_double(1.0))
    assertEquals(rational("0.123"), rational("23.123") % p_double(-1.0))
    assertEquals(rational("0.123"), rational("23.123") % p_double(23.0))
    assertEquals(rational("0.000"), rational("23.123") % p_double(23.123))
    assertEquals(rational("23.123"), rational("23.123") % p_double(-32.0))
    assertEquals(rational("23.123"), rational("23.123") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("23.123") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - p_double(Double.NaN_))
    assertEquals(rational("23.123"), rational("23.123") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("23.123") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % p_double(0.0))
    assertEquals(rational("0.0"), rational("-32") % p_double(1.0))
    assertEquals(rational("0.0"), rational("-32") % p_double(-1.0))
    assertEquals(rational("9.0"), rational("-32") % p_double(23.0))
    assertEquals(rational("8.877"), rational("-32") % p_double(23.123))
    assertEquals(rational("0.0"), rational("-32") % p_double(-32.0))
    assertEquals(rational("32"), rational("-32") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("-32") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - p_double(Double.NaN_))
    assertEquals(rational("32"), rational("-32") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-32") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % p_double(0.0))
    assertEquals(rational("0.456"), rational("-32.456") % p_double(1.0))
    assertEquals(rational("0.456"), rational("-32.456") % p_double(-1.0))
    assertEquals(rational("9.456"), rational("-32.456") % p_double(23.0))
    assertEquals(rational("9.333"), rational("-32.456") % p_double(23.123))
    assertEquals(rational("0.456"), rational("-32.456") % p_double(-32.0))
    assertEquals(rational("0.000"), rational("-32.456") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("-32.456") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - p_double(Double.NaN_))
    assertEquals(rational("32.456"), rational("-32.456") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-32.456") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % p_double(0.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_double(1.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % p_double(-1.0))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % p_double(23.0))
    assertEquals(rational("15.652456789"), rational("123456789012345678901234567890.123456789") % p_double(23.123))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % p_double(-32.0))
    assertEquals(rational("2.339456789"), rational("123456789012345678901234567890.123456789") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("123456789012345678901234567890.123456789") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("123456789012345678901234567890.123456789") % p_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % p_double(0.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_double(1.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % p_double(-1.0))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % p_double(23.0))
    assertEquals(rational("15.652456789"), rational("-123456789012345678901234567890.123456789") % p_double(23.123))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % p_double(-32.0))
    assertEquals(rational("2.339456789"), rational("-123456789012345678901234567890.123456789") % p_double(-32.456))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - p_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - p_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - p_double(Double.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("-123456789012345678901234567890.123456789") % p_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-123456789012345678901234567890.123456789") % p_double(Double.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % p_double(0.0)))
  }

  function testRationalDoubleRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % b_double(0.0))
    assertEquals(rational("0"), rational("0") % b_double(1.0))
    assertEquals(rational("0"), rational("0") % b_double(-1.0))
    assertEquals(rational("0"), rational("0") % b_double(23.0))
    assertEquals(rational("0"), rational("0") % b_double(23.123))
    assertEquals(rational("0"), rational("0") % b_double(-32.0))
    assertEquals(rational("0"), rational("0") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("0") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("0") - b_double(Double.NaN_))
    assertEquals(rational("0"), rational("0") % b_double(Double.MAX_VALUE))
    assertEquals(rational("0"), rational("0") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % b_double(0.0))
    assertEquals(rational("0.0"), rational("1") % b_double(1.0))
    assertEquals(rational("0.0"), rational("1") % b_double(-1.0))
    assertEquals(rational("1"), rational("1") % b_double(23.0))
    assertEquals(rational("1"), rational("1") % b_double(23.123))
    assertEquals(rational("1"), rational("1") % b_double(-32.0))
    assertEquals(rational("1"), rational("1") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("1") - b_double(Double.NaN_))
    assertEquals(rational("1"), rational("1") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("1") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % b_double(0.0))
    assertEquals(rational("0.0"), rational("-1") % b_double(1.0))
    assertEquals(rational("0.0"), rational("-1") % b_double(-1.0))
    assertEquals(rational("1"), rational("-1") % b_double(23.0))
    assertEquals(rational("1"), rational("-1") % b_double(23.123))
    assertEquals(rational("1"), rational("-1") % b_double(-32.0))
    assertEquals(rational("1"), rational("-1") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("-1") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-1") - b_double(Double.NaN_))
    assertEquals(rational("1"), rational("-1") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-1") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % b_double(0.0))
    assertEquals(rational("0.0"), rational("23") % b_double(1.0))
    assertEquals(rational("0.0"), rational("23") % b_double(-1.0))
    assertEquals(rational("0.0"), rational("23") % b_double(23.0))
    assertEquals(rational("23"), rational("23") % b_double(23.123))
    assertEquals(rational("23"), rational("23") % b_double(-32.0))
    assertEquals(rational("23"), rational("23") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("23") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23") - b_double(Double.NaN_))
    assertEquals(rational("23"), rational("23") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("23") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % b_double(0.0))
    assertEquals(rational("0.123"), rational("23.123") % b_double(1.0))
    assertEquals(rational("0.123"), rational("23.123") % b_double(-1.0))
    assertEquals(rational("0.123"), rational("23.123") % b_double(23.0))
    assertEquals(rational("0.000"), rational("23.123") % b_double(23.123))
    assertEquals(rational("23.123"), rational("23.123") % b_double(-32.0))
    assertEquals(rational("23.123"), rational("23.123") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("23.123") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("23.123") - b_double(Double.NaN_))
    assertEquals(rational("23.123"), rational("23.123") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("23.123") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % b_double(0.0))
    assertEquals(rational("0.0"), rational("-32") % b_double(1.0))
    assertEquals(rational("0.0"), rational("-32") % b_double(-1.0))
    assertEquals(rational("9.0"), rational("-32") % b_double(23.0))
    assertEquals(rational("8.877"), rational("-32") % b_double(23.123))
    assertEquals(rational("0.0"), rational("-32") % b_double(-32.0))
    assertEquals(rational("32"), rational("-32") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("-32") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32") - b_double(Double.NaN_))
    assertEquals(rational("32"), rational("-32") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-32") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % b_double(0.0))
    assertEquals(rational("0.456"), rational("-32.456") % b_double(1.0))
    assertEquals(rational("0.456"), rational("-32.456") % b_double(-1.0))
    assertEquals(rational("9.456"), rational("-32.456") % b_double(23.0))
    assertEquals(rational("9.333"), rational("-32.456") % b_double(23.123))
    assertEquals(rational("0.456"), rational("-32.456") % b_double(-32.0))
    assertEquals(rational("0.000"), rational("-32.456") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("-32.456") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-32.456") - b_double(Double.NaN_))
    assertEquals(rational("32.456"), rational("-32.456") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-32.456") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % b_double(0.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_double(1.0))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % b_double(-1.0))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % b_double(23.0))
    assertEquals(rational("15.652456789"), rational("123456789012345678901234567890.123456789") % b_double(23.123))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % b_double(-32.0))
    assertEquals(rational("2.339456789"), rational("123456789012345678901234567890.123456789") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("123456789012345678901234567890.123456789") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("123456789012345678901234567890.123456789") % b_double(Double.MIN_VALUE))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % b_double(0.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_double(1.0))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % b_double(-1.0))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % b_double(23.0))
    assertEquals(rational("15.652456789"), rational("-123456789012345678901234567890.123456789") % b_double(23.123))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % b_double(-32.0))
    assertEquals(rational("2.339456789"), rational("-123456789012345678901234567890.123456789") % b_double(-32.456))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - b_double(Double.POSITIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - b_double(Double.NEGATIVE_INFINITY))
    // Skipped test assertEquals(something, rational("-123456789012345678901234567890.123456789") - b_double(Double.NaN_))
    assertEquals(rational("123456789012345678901234567890.123456789"), rational("-123456789012345678901234567890.123456789") % b_double(Double.MAX_VALUE))
    // assertThrowsArithmeticException("Division impossible", \ -> rational("-123456789012345678901234567890.123456789") % b_double(Double.MIN_VALUE))

    assertEquals(Rational, statictypeof(rational("0") % b_double(0.0)))
  }

  function testRationalBigIntegerRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % big_int("0"))
    assertEquals(rational("0"), rational("0") % big_int("1"))
    assertEquals(rational("0"), rational("0") % big_int("-1"))
    assertEquals(rational("0"), rational("0") % big_int("23"))
    assertEquals(rational("0"), rational("0") % big_int("-32"))
    assertEquals(rational("0"), rational("0") % big_int("123456789012345678901234567890"))
    assertEquals(rational("0"), rational("0") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % big_int("0"))
    assertEquals(rational("0"), rational("1") % big_int("1"))
    assertEquals(rational("0"), rational("1") % big_int("-1"))
    assertEquals(rational("1"), rational("1") % big_int("23"))
    assertEquals(rational("1"), rational("1") % big_int("-32"))
    assertEquals(rational("1"), rational("1") % big_int("123456789012345678901234567890"))
    assertEquals(rational("1"), rational("1") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % big_int("0"))
    assertEquals(rational("0"), rational("-1") % big_int("1"))
    assertEquals(rational("0"), rational("-1") % big_int("-1"))
    assertEquals(rational("1"), rational("-1") % big_int("23"))
    assertEquals(rational("1"), rational("-1") % big_int("-32"))
    assertEquals(rational("1"), rational("-1") % big_int("123456789012345678901234567890"))
    assertEquals(rational("1"), rational("-1") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % big_int("0"))
    assertEquals(rational("0"), rational("23") % big_int("1"))
    assertEquals(rational("0"), rational("23") % big_int("-1"))
    assertEquals(rational("0"), rational("23") % big_int("23"))
    assertEquals(rational("23"), rational("23") % big_int("-32"))
    assertEquals(rational("23"), rational("23") % big_int("123456789012345678901234567890"))
    assertEquals(rational("23"), rational("23") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % big_int("0"))
    assertEquals(rational("0.123"), rational("23.123") % big_int("1"))
    assertEquals(rational("0.123"), rational("23.123") % big_int("-1"))
    assertEquals(rational("0.123"), rational("23.123") % big_int("23"))
    assertEquals(rational("23.123"), rational("23.123") % big_int("-32"))
    assertEquals(rational("23.123"), rational("23.123") % big_int("123456789012345678901234567890"))
    assertEquals(rational("23.123"), rational("23.123") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % big_int("0"))
    assertEquals(rational("0"), rational("-32") % big_int("1"))
    assertEquals(rational("0"), rational("-32") % big_int("-1"))
    assertEquals(rational("9"), rational("-32") % big_int("23"))
    assertEquals(rational("0"), rational("-32") % big_int("-32"))
    assertEquals(rational("32"), rational("-32") % big_int("123456789012345678901234567890"))
    assertEquals(rational("32"), rational("-32") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % big_int("0"))
    assertEquals(rational("0.456"), rational("-32.456") % big_int("1"))
    assertEquals(rational("0.456"), rational("-32.456") % big_int("-1"))
    assertEquals(rational("9.456"), rational("-32.456") % big_int("23"))
    assertEquals(rational("0.456"), rational("-32.456") % big_int("-32"))
    assertEquals(rational("32.456"), rational("-32.456") % big_int("123456789012345678901234567890"))
    assertEquals(rational("32.456"), rational("-32.456") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % big_int("0"))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % big_int("1"))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % big_int("-1"))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % big_int("23"))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % big_int("-32"))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % big_int("123456789012345678901234567890"))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % big_int("-123456789012345678901234567890"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % big_int("0"))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % big_int("1"))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % big_int("-1"))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % big_int("23"))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % big_int("-32"))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % big_int("123456789012345678901234567890"))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % big_int("-123456789012345678901234567890"))

    assertEquals(Rational, statictypeof(rational("0") % big_int("0")))
  }

  function testRationalRationalRemainder() {
    assertThrowsArithmeticException("Division undefined", \ -> rational("0") % rational("0"))
    assertEquals(rational("0"), rational("0") % rational("1"))
    assertEquals(rational("0"), rational("0") % rational("-1"))
    assertEquals(rational("0"), rational("0") % rational("23"))
    assertEquals(rational("0"), rational("0") % rational("23.123"))
    assertEquals(rational("0"), rational("0") % rational("-32"))
    assertEquals(rational("0"), rational("0") % rational("-32.456"))
    assertEquals(rational("0"), rational("0") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("0"), rational("0") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("1") % rational("0"))
    assertEquals(rational("0"), rational("1") % rational("1"))
    assertEquals(rational("0"), rational("1") % rational("-1"))
    assertEquals(rational("1"), rational("1") % rational("23"))
    assertEquals(rational("1"), rational("1") % rational("23.123"))
    assertEquals(rational("1"), rational("1") % rational("-32"))
    assertEquals(rational("1"), rational("1") % rational("-32.456"))
    assertEquals(rational("1"), rational("1") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("1"), rational("1") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-1") % rational("0"))
    assertEquals(rational("0"), rational("-1") % rational("1"))
    assertEquals(rational("0"), rational("-1") % rational("-1"))
    assertEquals(rational("1"), rational("-1") % rational("23"))
    assertEquals(rational("1"), rational("-1") % rational("23.123"))
    assertEquals(rational("1"), rational("-1") % rational("-32"))
    assertEquals(rational("1"), rational("-1") % rational("-32.456"))
    assertEquals(rational("1"), rational("-1") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("1"), rational("-1") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23") % rational("0"))
    assertEquals(rational("0"), rational("23") % rational("1"))
    assertEquals(rational("0"), rational("23") % rational("-1"))
    assertEquals(rational("0"), rational("23") % rational("23"))
    assertEquals(rational("23"), rational("23") % rational("23.123"))
    assertEquals(rational("23"), rational("23") % rational("-32"))
    assertEquals(rational("23"), rational("23") % rational("-32.456"))
    assertEquals(rational("23"), rational("23") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("23"), rational("23") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("23.123") % rational("0"))
    assertEquals(rational("0.123"), rational("23.123") % rational("1"))
    assertEquals(rational("0.123"), rational("23.123") % rational("-1"))
    assertEquals(rational("0.123"), rational("23.123") % rational("23"))
    assertEquals(rational("0.000"), rational("23.123") % rational("23.123"))
    assertEquals(rational("23.123"), rational("23.123") % rational("-32"))
    assertEquals(rational("23.123"), rational("23.123") % rational("-32.456"))
    assertEquals(rational("23.123"), rational("23.123") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("23.123"), rational("23.123") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32") % rational("0"))
    assertEquals(rational("0"), rational("-32") % rational("1"))
    assertEquals(rational("0"), rational("-32") % rational("-1"))
    assertEquals(rational("9"), rational("-32") % rational("23"))
    assertEquals(rational("8.877"), rational("-32") % rational("23.123"))
    assertEquals(rational("0"), rational("-32") % rational("-32"))
    assertEquals(rational("32"), rational("-32") % rational("-32.456"))
    assertEquals(rational("32"), rational("-32") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("32"), rational("-32") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-32.456") % rational("0"))
    assertEquals(rational("0.456"), rational("-32.456") % rational("1"))
    assertEquals(rational("0.456"), rational("-32.456") % rational("-1"))
    assertEquals(rational("9.456"), rational("-32.456") % rational("23"))
    assertEquals(rational("9.333"), rational("-32.456") % rational("23.123"))
    assertEquals(rational("0.456"), rational("-32.456") % rational("-32"))
    assertEquals(rational("0.000"), rational("-32.456") % rational("-32.456"))
    assertEquals(rational("32.456"), rational("-32.456") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("32.456"), rational("-32.456") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("123456789012345678901234567890.123456789") % rational("0"))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % rational("1"))
    assertEquals(rational("0.123456789"), rational("123456789012345678901234567890.123456789") % rational("-1"))
    assertEquals(rational("15.123456789"), rational("123456789012345678901234567890.123456789") % rational("23"))
    assertEquals(rational("15.652456789"), rational("123456789012345678901234567890.123456789") % rational("23.123"))
    assertEquals(rational("18.123456789"), rational("123456789012345678901234567890.123456789") % rational("-32"))
    assertEquals(rational("2.339456789"), rational("123456789012345678901234567890.123456789") % rational("-32.456"))
    assertEquals(rational("0E-9"), rational("123456789012345678901234567890.123456789") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("0E-9"), rational("123456789012345678901234567890.123456789") % rational("-123456789012345678901234567890.123456789"))

    assertThrowsArithmeticException("Division by zero", \ -> rational("-123456789012345678901234567890.123456789") % rational("0"))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % rational("1"))
    assertEquals(rational("0.123456789"), rational("-123456789012345678901234567890.123456789") % rational("-1"))
    assertEquals(rational("15.123456789"), rational("-123456789012345678901234567890.123456789") % rational("23"))
    assertEquals(rational("15.652456789"), rational("-123456789012345678901234567890.123456789") % rational("23.123"))
    assertEquals(rational("18.123456789"), rational("-123456789012345678901234567890.123456789") % rational("-32"))
    assertEquals(rational("2.339456789"), rational("-123456789012345678901234567890.123456789") % rational("-32.456"))
    assertEquals(rational("0E-9"), rational("-123456789012345678901234567890.123456789") % rational("123456789012345678901234567890.123456789"))
    assertEquals(rational("0E-9"), rational("-123456789012345678901234567890.123456789") % rational("-123456789012345678901234567890.123456789"))

    assertEquals(Rational, statictypeof(rational("0") % rational("0")))
  }

}

